// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/hangUp/HangUpMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from proto/hangUp/HangUpMessage.proto</summary>
  public static partial class HangUpMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/hangUp/HangUpMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HangUpMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBwcm90by9oYW5nVXAvSGFuZ1VwTWVzc2FnZS5wcm90bxogcHJvdG8vY29t",
            "bW9uL0NvbW1vbk1lc3NhZ2UucHJvdG8iIwoRSGFuZ1VwSW5mb1JlcXVlc3QS",
            "DgoGdXNlcklEGAEgASgDIqMBChJIYW5nVXBJbmZvUmVzcG9uc2USDgoGdXNl",
            "cklEGAEgASgDEhMKC2xhc3RHZXRUaW1lGAIgASgDEhMKC3N1cnBsdXNUaW1l",
            "GAMgAygFEhIKCmZhc3RBZFRpbWUYBCABKAUSEwoLZmFzdFBoeVRpbWUYBSAB",
            "KAUSEgoKcmFuZG9tU2VlZBgGIAEoBRIWCg5mYXN0UmFuZG9tU2VlZBgHIAEo",
            "BSIiChBIYW5nVXBHZXRSZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAyJBChFIYW5n",
            "VXBHZXRSZXNwb25zZRIOCgZ1c2VySUQYASABKAMSHAoJaXRlbURhdGFzGAIg",
            "AygLMgkuSXRlbURhdGEiSgoUSGFuZ1VwRmFzdEdldFJlcXVlc3QSDgoGdXNl",
            "cklEGAEgASgDEiIKCGZhc3RUeXBlGAIgASgOMhAuRUhhbmdVcEZhc3RUeXBl",
            "IkUKFUhhbmdVcEZhc3RHZXRSZXNwb25zZRIOCgZ1c2VySUQYASABKAMSHAoJ",
            "aXRlbURhdGFzGAIgAygLMgkuSXRlbURhdGEqIgoPRUhhbmdVcEZhc3RUeXBl",
            "EgYKAkFkEAASBwoDUGh5EAFCIwoYY29tLnRvcGdhbWUubWVzc2FnZS5oYWxs",
            "qgIGUHJvdG8zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto3.CommonMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.EHangUpFastType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HangUpInfoRequest), global::Proto3.HangUpInfoRequest.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HangUpInfoResponse), global::Proto3.HangUpInfoResponse.Parser, new[]{ "UserID", "LastGetTime", "SurplusTime", "FastAdTime", "FastPhyTime", "RandomSeed", "FastRandomSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HangUpGetRequest), global::Proto3.HangUpGetRequest.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HangUpGetResponse), global::Proto3.HangUpGetResponse.Parser, new[]{ "UserID", "ItemDatas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HangUpFastGetRequest), global::Proto3.HangUpFastGetRequest.Parser, new[]{ "UserID", "FastType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HangUpFastGetResponse), global::Proto3.HangUpFastGetResponse.Parser, new[]{ "UserID", "ItemDatas" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EHangUpFastType {
    /// <summary>
    ///广告
    /// </summary>
    [pbr::OriginalName("Ad")] Ad = 0,
    /// <summary>
    ///体力
    /// </summary>
    [pbr::OriginalName("Phy")] Phy = 1,
  }

  #endregion

  #region Messages
  public sealed partial class HangUpInfoRequest : pb::IMessage<HangUpInfoRequest> {
    private static readonly pb::MessageParser<HangUpInfoRequest> _parser = new pb::MessageParser<HangUpInfoRequest>(() => new HangUpInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HangUpMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpInfoRequest(HangUpInfoRequest other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpInfoRequest Clone() {
      return new HangUpInfoRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangUpInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangUpInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangUpInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///挂机信息更新
  /// </summary>
  public sealed partial class HangUpInfoResponse : pb::IMessage<HangUpInfoResponse> {
    private static readonly pb::MessageParser<HangUpInfoResponse> _parser = new pb::MessageParser<HangUpInfoResponse>(() => new HangUpInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HangUpMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpInfoResponse(HangUpInfoResponse other) : this() {
      userID_ = other.userID_;
      lastGetTime_ = other.lastGetTime_;
      surplusTime_ = other.surplusTime_.Clone();
      fastAdTime_ = other.fastAdTime_;
      fastPhyTime_ = other.fastPhyTime_;
      randomSeed_ = other.randomSeed_;
      fastRandomSeed_ = other.fastRandomSeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpInfoResponse Clone() {
      return new HangUpInfoResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "lastGetTime" field.</summary>
    public const int LastGetTimeFieldNumber = 2;
    private long lastGetTime_;
    /// <summary>
    ///上次领取时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastGetTime {
      get { return lastGetTime_; }
      set {
        lastGetTime_ = value;
      }
    }

    /// <summary>Field number for the "surplusTime" field.</summary>
    public const int SurplusTimeFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_surplusTime_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> surplusTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///上次剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SurplusTime {
      get { return surplusTime_; }
    }

    /// <summary>Field number for the "fastAdTime" field.</summary>
    public const int FastAdTimeFieldNumber = 4;
    private int fastAdTime_;
    /// <summary>
    ///广告次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FastAdTime {
      get { return fastAdTime_; }
      set {
        fastAdTime_ = value;
      }
    }

    /// <summary>Field number for the "fastPhyTime" field.</summary>
    public const int FastPhyTimeFieldNumber = 5;
    private int fastPhyTime_;
    /// <summary>
    ///体力次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FastPhyTime {
      get { return fastPhyTime_; }
      set {
        fastPhyTime_ = value;
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 6;
    private int randomSeed_;
    /// <summary>
    ///随机种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "fastRandomSeed" field.</summary>
    public const int FastRandomSeedFieldNumber = 7;
    private int fastRandomSeed_;
    /// <summary>
    ///随机种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FastRandomSeed {
      get { return fastRandomSeed_; }
      set {
        fastRandomSeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangUpInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangUpInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (LastGetTime != other.LastGetTime) return false;
      if(!surplusTime_.Equals(other.surplusTime_)) return false;
      if (FastAdTime != other.FastAdTime) return false;
      if (FastPhyTime != other.FastPhyTime) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (FastRandomSeed != other.FastRandomSeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (LastGetTime != 0L) hash ^= LastGetTime.GetHashCode();
      hash ^= surplusTime_.GetHashCode();
      if (FastAdTime != 0) hash ^= FastAdTime.GetHashCode();
      if (FastPhyTime != 0) hash ^= FastPhyTime.GetHashCode();
      if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
      if (FastRandomSeed != 0) hash ^= FastRandomSeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (LastGetTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastGetTime);
      }
      surplusTime_.WriteTo(output, _repeated_surplusTime_codec);
      if (FastAdTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FastAdTime);
      }
      if (FastPhyTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FastPhyTime);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RandomSeed);
      }
      if (FastRandomSeed != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FastRandomSeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (LastGetTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastGetTime);
      }
      size += surplusTime_.CalculateSize(_repeated_surplusTime_codec);
      if (FastAdTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FastAdTime);
      }
      if (FastPhyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FastPhyTime);
      }
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      if (FastRandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FastRandomSeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangUpInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.LastGetTime != 0L) {
        LastGetTime = other.LastGetTime;
      }
      surplusTime_.Add(other.surplusTime_);
      if (other.FastAdTime != 0) {
        FastAdTime = other.FastAdTime;
      }
      if (other.FastPhyTime != 0) {
        FastPhyTime = other.FastPhyTime;
      }
      if (other.RandomSeed != 0) {
        RandomSeed = other.RandomSeed;
      }
      if (other.FastRandomSeed != 0) {
        FastRandomSeed = other.FastRandomSeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            LastGetTime = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            surplusTime_.AddEntriesFrom(input, _repeated_surplusTime_codec);
            break;
          }
          case 32: {
            FastAdTime = input.ReadInt32();
            break;
          }
          case 40: {
            FastPhyTime = input.ReadInt32();
            break;
          }
          case 48: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 56: {
            FastRandomSeed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取挂机奖励
  /// </summary>
  public sealed partial class HangUpGetRequest : pb::IMessage<HangUpGetRequest> {
    private static readonly pb::MessageParser<HangUpGetRequest> _parser = new pb::MessageParser<HangUpGetRequest>(() => new HangUpGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HangUpMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpGetRequest(HangUpGetRequest other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpGetRequest Clone() {
      return new HangUpGetRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangUpGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangUpGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangUpGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HangUpGetResponse : pb::IMessage<HangUpGetResponse> {
    private static readonly pb::MessageParser<HangUpGetResponse> _parser = new pb::MessageParser<HangUpGetResponse>(() => new HangUpGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HangUpMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpGetResponse(HangUpGetResponse other) : this() {
      userID_ = other.userID_;
      itemDatas_ = other.itemDatas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpGetResponse Clone() {
      return new HangUpGetResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "itemDatas" field.</summary>
    public const int ItemDatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.ItemData> _repeated_itemDatas_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Proto3.ItemData> itemDatas_ = new pbc::RepeatedField<global::Proto3.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.ItemData> ItemDatas {
      get { return itemDatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangUpGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangUpGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if(!itemDatas_.Equals(other.itemDatas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      hash ^= itemDatas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      itemDatas_.WriteTo(output, _repeated_itemDatas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      size += itemDatas_.CalculateSize(_repeated_itemDatas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangUpGetResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      itemDatas_.Add(other.itemDatas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            itemDatas_.AddEntriesFrom(input, _repeated_itemDatas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///快速领取挂机奖励
  /// </summary>
  public sealed partial class HangUpFastGetRequest : pb::IMessage<HangUpFastGetRequest> {
    private static readonly pb::MessageParser<HangUpFastGetRequest> _parser = new pb::MessageParser<HangUpFastGetRequest>(() => new HangUpFastGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpFastGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HangUpMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpFastGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpFastGetRequest(HangUpFastGetRequest other) : this() {
      userID_ = other.userID_;
      fastType_ = other.fastType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpFastGetRequest Clone() {
      return new HangUpFastGetRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "fastType" field.</summary>
    public const int FastTypeFieldNumber = 2;
    private global::Proto3.EHangUpFastType fastType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.EHangUpFastType FastType {
      get { return fastType_; }
      set {
        fastType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangUpFastGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangUpFastGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (FastType != other.FastType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (FastType != 0) hash ^= FastType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (FastType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FastType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (FastType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FastType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangUpFastGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.FastType != 0) {
        FastType = other.FastType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            fastType_ = (global::Proto3.EHangUpFastType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HangUpFastGetResponse : pb::IMessage<HangUpFastGetResponse> {
    private static readonly pb::MessageParser<HangUpFastGetResponse> _parser = new pb::MessageParser<HangUpFastGetResponse>(() => new HangUpFastGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HangUpFastGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HangUpMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpFastGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpFastGetResponse(HangUpFastGetResponse other) : this() {
      userID_ = other.userID_;
      itemDatas_ = other.itemDatas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HangUpFastGetResponse Clone() {
      return new HangUpFastGetResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "itemDatas" field.</summary>
    public const int ItemDatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.ItemData> _repeated_itemDatas_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Proto3.ItemData> itemDatas_ = new pbc::RepeatedField<global::Proto3.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.ItemData> ItemDatas {
      get { return itemDatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HangUpFastGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HangUpFastGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if(!itemDatas_.Equals(other.itemDatas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      hash ^= itemDatas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      itemDatas_.WriteTo(output, _repeated_itemDatas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      size += itemDatas_.CalculateSize(_repeated_itemDatas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HangUpFastGetResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      itemDatas_.Add(other.itemDatas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            itemDatas_.AddEntriesFrom(input, _repeated_itemDatas_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
