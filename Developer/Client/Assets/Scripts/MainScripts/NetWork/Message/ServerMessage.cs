// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/server/ServerMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from proto/server/ServerMessage.proto</summary>
  public static partial class ServerMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/server/ServerMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBwcm90by9zZXJ2ZXIvU2VydmVyTWVzc2FnZS5wcm90bxoPcHJvdG8vTWlk",
            "LnByb3RvGiBwcm90by9jb21tb24vQ29tbW9uTWVzc2FnZS5wcm90byJpChNT",
            "eXN0ZW1FcnJvclJlc3BvbnNlEhEKA21pZBgBIAEoDjIELk1JRBIRCgllcnJv",
            "ckNvZGUYAiABKAUSCwoDbXNnGAMgASgJEhAKCGFjY291bklkGAQgASgDEg0K",
            "BXRpdGxlGAUgASgJIh4KDEhlYXJ0UmVxdWVzdBIOCgZ1c2VySUQYASABKAMi",
            "RwoNSGVhcnRSZXNwb25zZRIOCgZ1c2VySUQYASABKAMSEgoKc2VydmVyVGlt",
            "ZRgCIAEoAxISCgpvbmxpbmVUaW1lGAMgASgDIjgKFVNlcnZlclJlZ2lzdGVy",
            "UmVxdWVzdBIfCgpzZXJ2ZXJJbmZvGAEgASgLMgsuU2VydmVySW5mbyI5ChZT",
            "ZXJ2ZXJSZWdpc3RlclJlc3BvbnNlEh8KCnNlcnZlckluZm8YASABKAsyCy5T",
            "ZXJ2ZXJJbmZvIkUKEVNlcnZlckxpc3RSZXF1ZXN0EhIKCnNlcnZlclR5cGUY",
            "ASABKAUSDQoFbWluSWQYAiABKAUSDQoFbWF4SWQYAyABKAUiNQoSU2VydmVy",
            "TGlzdFJlc3BvbnNlEh8KCnNlcnZlckluZm8YASADKAsyCy5TZXJ2ZXJJbmZv",
            "InEKElNlcnZlckV2ZW50UmVxdWVzdBIMCgR0eXBlGAEgASgFEhAKCHNlcnZl",
            "cklkGAIgASgFEgoKAmlkGAMgASgDEhEKCXNlc3Npb25JZBgEIAEoAxIOCgZw",
            "YXJhbXMYBSADKAUSDAoEaW5mbxgGIAEoCSIzChNTZXJ2ZXJFdmVudFJlc3Bv",
            "bnNlEgwKBHR5cGUYASABKAUSDgoGcmVzdWx0GAIgASgFIoIBChRTZXJ2ZXJT",
            "dGF0dXNSZXNwb25zZRISCgpzZXJ2ZXJUeXBlGAEgASgFEgoKAmlkGAIgASgF",
            "EgwKBG5hbWUYAyABKAkSHQoFc3RhdGUYBCABKA4yDi5FU2VydmVyU3RhdHVz",
            "Eg4KBm1xTmFtZRgFIAEoCRINCgVsYWJlbBgGIAEoCSI9Cg9TZXJ2ZXJEaXNj",
            "b252ZXISDAoEdHlwZRgBIAEoBRINCgVtaW5JZBgCIAEoBRINCgVtYXhJZBgD",
            "IAEoBSLGAgoKU2VydmVySW5mbxIKCgJpZBgBIAEoBRIKCgJpcBgCIAEoCRIM",
            "CgR0eXBlGAMgASgFEgwKBHBvcnQYBCABKAUSHQoFc3RhdGUYBSABKA4yDi5F",
            "U2VydmVyU3RhdHVzEg4KBm9ubGluZRgGIAEoBRIUCgxtYXhVc2VyQ291bnQY",
            "ByABKAUSEAoIaHR0cHBvcnQYCCABKAUSDAoEbmFtZRgJIAEoCRIOCgZtcU5h",
            "bWUYCiABKAkSDQoFd3d3aXAYCyABKAkSEQoJdXNlTWVtb3J5GAwgASgDEhIK",
            "CmZyZWVNZW1vcnkYDSABKAMSEwoLdG90YWxNZW1vcnkYDiABKAMSDwoHdmVy",
            "c2lvbhgPIAEoCRINCgVsYWJlbBgQIAEoCRIkCgpkaXNjb252ZXJ0GBEgAygL",
            "MhAuU2VydmVyRGlzY29udmVyIhgKFlNlcnZlckxvZ2luTGlzdFJlcXVlc3Qi",
            "bQoXU2VydmVyTG9naW5MaXN0UmVzcG9uc2USKgoPaG90VXBkYXRlU2VydmVy",
            "GAEgASgLMhEuQ2xpZW50U2VydmVySW5mbxImCgtnYXRlU2VydmVycxgCIAMo",
            "CzIRLkNsaWVudFNlcnZlckluZm8iMQoQU2VydmVyQ21kUmVxdWVzdBILCgNj",
            "bWQYASABKAkSEAoIY21kUGFyYW0YAiABKAkiOgoYTGlua1NlcnZlckNoYW5n",
            "ZVJlc3BvbnNlEg4KBnVzZXJJZBgBIAEoAxIOCgZyZXN1bHQYAiABKAUiQgoM",
            "V2ViR21SZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAxILCgNrZXkYAiABKAkSFQoN",
            "cGFyYW1ldGVyTGlzdBgDIAMoCSJFChRXZWJTZW5kTm90aWNlUmVxdWVzdBIO",
            "CgZ1c2VySUQYASABKAMSDgoGbm90aWNlGAIgASgJEg0KBXRpdGxlGAMgASgJ",
            "IigKE1dlYlRvZ2dsZUhvdFJlcXVlc3QSEQoJdG9nZ2xlSG90GAEgASgIIj4K",
            "DVdlYkdtUmVzcG9uc2USDgoGdXNlcklEGAEgASgDEg8KB3N1Y2Nlc3MYAiAB",
            "KAgSDAoEdGV4dBgDIAEoCSpDCg5TeXN0ZW1FcnJvQ29kZRIPCgtIYWxsTm90",
            "RmluZBAAEg8KC0dhbWVOb3RGaW5kEAESDwoLQ29uZWN0UmVzZXQQAiozCg1F",
            "U2VydmVyU3RhdHVzEgoKBk5vcm1hbBAAEgwKCE1haW50YWluEAESCAoEU3Rv",
            "cBACQh4KE2NvbS50b3BnYW1lLm1lc3NhZ2WqAgZQcm90bzNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto3.MidReflection.Descriptor, global::Proto3.CommonMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.SystemErroCode), typeof(global::Proto3.EServerStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.SystemErrorResponse), global::Proto3.SystemErrorResponse.Parser, new[]{ "Mid", "ErrorCode", "Msg", "AccounId", "Title" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HeartRequest), global::Proto3.HeartRequest.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.HeartResponse), global::Proto3.HeartResponse.Parser, new[]{ "UserID", "ServerTime", "OnlineTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerRegisterRequest), global::Proto3.ServerRegisterRequest.Parser, new[]{ "ServerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerRegisterResponse), global::Proto3.ServerRegisterResponse.Parser, new[]{ "ServerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerListRequest), global::Proto3.ServerListRequest.Parser, new[]{ "ServerType", "MinId", "MaxId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerListResponse), global::Proto3.ServerListResponse.Parser, new[]{ "ServerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerEventRequest), global::Proto3.ServerEventRequest.Parser, new[]{ "Type", "ServerId", "Id", "SessionId", "Params", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerEventResponse), global::Proto3.ServerEventResponse.Parser, new[]{ "Type", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerStatusResponse), global::Proto3.ServerStatusResponse.Parser, new[]{ "ServerType", "Id", "Name", "State", "MqName", "Label" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerDisconver), global::Proto3.ServerDisconver.Parser, new[]{ "Type", "MinId", "MaxId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerInfo), global::Proto3.ServerInfo.Parser, new[]{ "Id", "Ip", "Type", "Port", "State", "Online", "MaxUserCount", "Httpport", "Name", "MqName", "Wwwip", "UseMemory", "FreeMemory", "TotalMemory", "Version", "Label", "Disconvert" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerLoginListRequest), global::Proto3.ServerLoginListRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerLoginListResponse), global::Proto3.ServerLoginListResponse.Parser, new[]{ "HotUpdateServer", "GateServers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ServerCmdRequest), global::Proto3.ServerCmdRequest.Parser, new[]{ "Cmd", "CmdParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LinkServerChangeResponse), global::Proto3.LinkServerChangeResponse.Parser, new[]{ "UserId", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.WebGmRequest), global::Proto3.WebGmRequest.Parser, new[]{ "UserID", "Key", "ParameterList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.WebSendNoticeRequest), global::Proto3.WebSendNoticeRequest.Parser, new[]{ "UserID", "Notice", "Title" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.WebToggleHotRequest), global::Proto3.WebToggleHotRequest.Parser, new[]{ "ToggleHot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.WebGmResponse), global::Proto3.WebGmResponse.Parser, new[]{ "UserID", "Success", "Text" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///系统错误码
  /// </summary>
  public enum SystemErroCode {
    /// <summary>
    ///没有可用大厅服
    /// </summary>
    [pbr::OriginalName("HallNotFind")] HallNotFind = 0,
    /// <summary>
    ///没有可用游戏服
    /// </summary>
    [pbr::OriginalName("GameNotFind")] GameNotFind = 1,
    /// <summary>
    ///连接已重置，失效
    /// </summary>
    [pbr::OriginalName("ConectReset")] ConectReset = 2,
  }

  public enum EServerStatus {
    /// <summary>
    ///正常
    /// </summary>
    [pbr::OriginalName("Normal")] Normal = 0,
    /// <summary>
    ///维护中
    /// </summary>
    [pbr::OriginalName("Maintain")] Maintain = 1,
    /// <summary>
    /// 关闭
    /// </summary>
    [pbr::OriginalName("Stop")] Stop = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///系统错误消息返回
  /// </summary>
  public sealed partial class SystemErrorResponse : pb::IMessage<SystemErrorResponse> {
    private static readonly pb::MessageParser<SystemErrorResponse> _parser = new pb::MessageParser<SystemErrorResponse>(() => new SystemErrorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SystemErrorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemErrorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemErrorResponse(SystemErrorResponse other) : this() {
      mid_ = other.mid_;
      errorCode_ = other.errorCode_;
      msg_ = other.msg_;
      accounId_ = other.accounId_;
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SystemErrorResponse Clone() {
      return new SystemErrorResponse(this);
    }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private global::Proto3.MID mid_ = 0;
    /// <summary>
    ///消息id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.MID Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private int errorCode_;
    /// <summary>
    ///错误码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    ///错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accounId" field.</summary>
    public const int AccounIdFieldNumber = 4;
    private long accounId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccounId {
      get { return accounId_; }
      set {
        accounId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SystemErrorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SystemErrorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mid != other.Mid) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Msg != other.Msg) return false;
      if (AccounId != other.AccounId) return false;
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mid != 0) hash ^= Mid.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (AccounId != 0L) hash ^= AccounId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mid);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrorCode);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (AccounId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AccounId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mid);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (AccounId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccounId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SystemErrorResponse other) {
      if (other == null) {
        return;
      }
      if (other.Mid != 0) {
        Mid = other.Mid;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.AccounId != 0L) {
        AccounId = other.AccounId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mid_ = (global::Proto3.MID) input.ReadEnum();
            break;
          }
          case 16: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
          case 32: {
            AccounId = input.ReadInt64();
            break;
          }
          case 42: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///心跳
  /// </summary>
  public sealed partial class HeartRequest : pb::IMessage<HeartRequest> {
    private static readonly pb::MessageParser<HeartRequest> _parser = new pb::MessageParser<HeartRequest>(() => new HeartRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartRequest(HeartRequest other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartRequest Clone() {
      return new HeartRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartResponse : pb::IMessage<HeartResponse> {
    private static readonly pb::MessageParser<HeartResponse> _parser = new pb::MessageParser<HeartResponse>(() => new HeartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartResponse(HeartResponse other) : this() {
      userID_ = other.userID_;
      serverTime_ = other.serverTime_;
      onlineTime_ = other.onlineTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartResponse Clone() {
      return new HeartResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 2;
    private long serverTime_;
    /// <summary>
    ///服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "onlineTime" field.</summary>
    public const int OnlineTimeFieldNumber = 3;
    private long onlineTime_;
    /// <summary>
    /// 在线时长（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OnlineTime {
      get { return onlineTime_; }
      set {
        onlineTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (ServerTime != other.ServerTime) return false;
      if (OnlineTime != other.OnlineTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ServerTime != 0L) hash ^= ServerTime.GetHashCode();
      if (OnlineTime != 0L) hash ^= OnlineTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (ServerTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerTime);
      }
      if (OnlineTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OnlineTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ServerTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
      }
      if (OnlineTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OnlineTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ServerTime != 0L) {
        ServerTime = other.ServerTime;
      }
      if (other.OnlineTime != 0L) {
        OnlineTime = other.OnlineTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            ServerTime = input.ReadInt64();
            break;
          }
          case 24: {
            OnlineTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册服务器
  /// </summary>
  public sealed partial class ServerRegisterRequest : pb::IMessage<ServerRegisterRequest> {
    private static readonly pb::MessageParser<ServerRegisterRequest> _parser = new pb::MessageParser<ServerRegisterRequest>(() => new ServerRegisterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRegisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterRequest(ServerRegisterRequest other) : this() {
      serverInfo_ = other.serverInfo_ != null ? other.serverInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterRequest Clone() {
      return new ServerRegisterRequest(this);
    }

    /// <summary>Field number for the "serverInfo" field.</summary>
    public const int ServerInfoFieldNumber = 1;
    private global::Proto3.ServerInfo serverInfo_;
    /// <summary>
    ///服务器信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.ServerInfo ServerInfo {
      get { return serverInfo_; }
      set {
        serverInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRegisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRegisterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerInfo, other.ServerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverInfo_ != null) hash ^= ServerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRegisterRequest other) {
      if (other == null) {
        return;
      }
      if (other.serverInfo_ != null) {
        if (serverInfo_ == null) {
          serverInfo_ = new global::Proto3.ServerInfo();
        }
        ServerInfo.MergeFrom(other.ServerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (serverInfo_ == null) {
              serverInfo_ = new global::Proto3.ServerInfo();
            }
            input.ReadMessage(serverInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册服务器
  /// </summary>
  public sealed partial class ServerRegisterResponse : pb::IMessage<ServerRegisterResponse> {
    private static readonly pb::MessageParser<ServerRegisterResponse> _parser = new pb::MessageParser<ServerRegisterResponse>(() => new ServerRegisterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRegisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterResponse(ServerRegisterResponse other) : this() {
      serverInfo_ = other.serverInfo_ != null ? other.serverInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRegisterResponse Clone() {
      return new ServerRegisterResponse(this);
    }

    /// <summary>Field number for the "serverInfo" field.</summary>
    public const int ServerInfoFieldNumber = 1;
    private global::Proto3.ServerInfo serverInfo_;
    /// <summary>
    ///返回服务器信息，状态，在线人数在集群服设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.ServerInfo ServerInfo {
      get { return serverInfo_; }
      set {
        serverInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRegisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRegisterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServerInfo, other.ServerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serverInfo_ != null) hash ^= ServerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serverInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serverInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRegisterResponse other) {
      if (other == null) {
        return;
      }
      if (other.serverInfo_ != null) {
        if (serverInfo_ == null) {
          serverInfo_ = new global::Proto3.ServerInfo();
        }
        ServerInfo.MergeFrom(other.ServerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (serverInfo_ == null) {
              serverInfo_ = new global::Proto3.ServerInfo();
            }
            input.ReadMessage(serverInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器列表
  /// </summary>
  public sealed partial class ServerListRequest : pb::IMessage<ServerListRequest> {
    private static readonly pb::MessageParser<ServerListRequest> _parser = new pb::MessageParser<ServerListRequest>(() => new ServerListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListRequest(ServerListRequest other) : this() {
      serverType_ = other.serverType_;
      minId_ = other.minId_;
      maxId_ = other.maxId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListRequest Clone() {
      return new ServerListRequest(this);
    }

    /// <summary>Field number for the "serverType" field.</summary>
    public const int ServerTypeFieldNumber = 1;
    private int serverType_;
    /// <summary>
    ///服务器类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "minId" field.</summary>
    public const int MinIdFieldNumber = 2;
    private int minId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinId {
      get { return minId_; }
      set {
        minId_ = value;
      }
    }

    /// <summary>Field number for the "maxId" field.</summary>
    public const int MaxIdFieldNumber = 3;
    private int maxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxId {
      get { return maxId_; }
      set {
        maxId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerType != other.ServerType) return false;
      if (MinId != other.MinId) return false;
      if (MaxId != other.MaxId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      if (MinId != 0) hash ^= MinId.GetHashCode();
      if (MaxId != 0) hash ^= MaxId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerType);
      }
      if (MinId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinId);
      }
      if (MaxId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      if (MinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinId);
      }
      if (MaxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerListRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      if (other.MinId != 0) {
        MinId = other.MinId;
      }
      if (other.MaxId != 0) {
        MaxId = other.MaxId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerType = input.ReadInt32();
            break;
          }
          case 16: {
            MinId = input.ReadInt32();
            break;
          }
          case 24: {
            MaxId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器列表
  /// </summary>
  public sealed partial class ServerListResponse : pb::IMessage<ServerListResponse> {
    private static readonly pb::MessageParser<ServerListResponse> _parser = new pb::MessageParser<ServerListResponse>(() => new ServerListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListResponse(ServerListResponse other) : this() {
      serverInfo_ = other.serverInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerListResponse Clone() {
      return new ServerListResponse(this);
    }

    /// <summary>Field number for the "serverInfo" field.</summary>
    public const int ServerInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto3.ServerInfo> _repeated_serverInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Proto3.ServerInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.ServerInfo> serverInfo_ = new pbc::RepeatedField<global::Proto3.ServerInfo>();
    /// <summary>
    ///服务器信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.ServerInfo> ServerInfo {
      get { return serverInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serverInfo_.Equals(other.serverInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serverInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverInfo_.WriteTo(output, _repeated_serverInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverInfo_.CalculateSize(_repeated_serverInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerListResponse other) {
      if (other == null) {
        return;
      }
      serverInfo_.Add(other.serverInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            serverInfo_.AddEntriesFrom(input, _repeated_serverInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器事件
  /// </summary>
  public sealed partial class ServerEventRequest : pb::IMessage<ServerEventRequest> {
    private static readonly pb::MessageParser<ServerEventRequest> _parser = new pb::MessageParser<ServerEventRequest>(() => new ServerEventRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerEventRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEventRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEventRequest(ServerEventRequest other) : this() {
      type_ = other.type_;
      serverId_ = other.serverId_;
      id_ = other.id_;
      sessionId_ = other.sessionId_;
      params_ = other.params_.Clone();
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEventRequest Clone() {
      return new ServerEventRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 事件类型  1踢玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    /// <summary>
    /// 服务器Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private long id_;
    /// <summary>
    /// 玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "sessionId" field.</summary>
    public const int SessionIdFieldNumber = 4;
    private long sessionId_;
    /// <summary>
    /// session id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 附加参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 6;
    private string info_ = "";
    /// <summary>
    /// 其他额外信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerEventRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerEventRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ServerId != other.ServerId) return false;
      if (Id != other.Id) return false;
      if (SessionId != other.SessionId) return false;
      if(!params_.Equals(other.params_)) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (SessionId != 0L) hash ^= SessionId.GetHashCode();
      hash ^= params_.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (SessionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SessionId);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (Info.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (SessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionId);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerEventRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.SessionId != 0L) {
        SessionId = other.SessionId;
      }
      params_.Add(other.params_);
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 32: {
            SessionId = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 50: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器事件
  /// </summary>
  public sealed partial class ServerEventResponse : pb::IMessage<ServerEventResponse> {
    private static readonly pb::MessageParser<ServerEventResponse> _parser = new pb::MessageParser<ServerEventResponse>(() => new ServerEventResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerEventResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEventResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEventResponse(ServerEventResponse other) : this() {
      type_ = other.type_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEventResponse Clone() {
      return new ServerEventResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///事件类型  1踢玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerEventResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerEventResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerEventResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerStatusResponse : pb::IMessage<ServerStatusResponse> {
    private static readonly pb::MessageParser<ServerStatusResponse> _parser = new pb::MessageParser<ServerStatusResponse>(() => new ServerStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusResponse(ServerStatusResponse other) : this() {
      serverType_ = other.serverType_;
      id_ = other.id_;
      name_ = other.name_;
      state_ = other.state_;
      mqName_ = other.mqName_;
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusResponse Clone() {
      return new ServerStatusResponse(this);
    }

    /// <summary>Field number for the "serverType" field.</summary>
    public const int ServerTypeFieldNumber = 1;
    private int serverType_;
    /// <summary>
    /// 类型   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///服务器名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::Proto3.EServerStatus state_ = 0;
    /// <summary>
    ///状态 0表示正常；1表示维护，2表示关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.EServerStatus State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "mqName" field.</summary>
    public const int MqNameFieldNumber = 5;
    private string mqName_ = "";
    /// <summary>
    ///服务器内部用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MqName {
      get { return mqName_; }
      set {
        mqName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 6;
    private string label_ = "";
    /// <summary>
    ///标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerType != other.ServerType) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (State != other.State) return false;
      if (MqName != other.MqName) return false;
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (MqName.Length != 0) hash ^= MqName.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerType);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
      if (MqName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MqName);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (MqName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MqName);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.MqName.Length != 0) {
        MqName = other.MqName;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerType = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            state_ = (global::Proto3.EServerStatus) input.ReadEnum();
            break;
          }
          case 42: {
            MqName = input.ReadString();
            break;
          }
          case 50: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerDisconver : pb::IMessage<ServerDisconver> {
    private static readonly pb::MessageParser<ServerDisconver> _parser = new pb::MessageParser<ServerDisconver>(() => new ServerDisconver());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerDisconver> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerDisconver() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerDisconver(ServerDisconver other) : this() {
      type_ = other.type_;
      minId_ = other.minId_;
      maxId_ = other.maxId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerDisconver Clone() {
      return new ServerDisconver(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 类型   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "minId" field.</summary>
    public const int MinIdFieldNumber = 2;
    private int minId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinId {
      get { return minId_; }
      set {
        minId_ = value;
      }
    }

    /// <summary>Field number for the "maxId" field.</summary>
    public const int MaxIdFieldNumber = 3;
    private int maxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxId {
      get { return maxId_; }
      set {
        maxId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerDisconver);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerDisconver other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MinId != other.MinId) return false;
      if (MaxId != other.MaxId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MinId != 0) hash ^= MinId.GetHashCode();
      if (MaxId != 0) hash ^= MaxId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (MinId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinId);
      }
      if (MaxId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (MinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinId);
      }
      if (MaxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerDisconver other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MinId != 0) {
        MinId = other.MinId;
      }
      if (other.MaxId != 0) {
        MaxId = other.MaxId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            MinId = input.ReadInt32();
            break;
          }
          case 24: {
            MaxId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器信息
  /// </summary>
  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      id_ = other.id_;
      ip_ = other.ip_;
      type_ = other.type_;
      port_ = other.port_;
      state_ = other.state_;
      online_ = other.online_;
      maxUserCount_ = other.maxUserCount_;
      httpport_ = other.httpport_;
      name_ = other.name_;
      mqName_ = other.mqName_;
      wwwip_ = other.wwwip_;
      useMemory_ = other.useMemory_;
      freeMemory_ = other.freeMemory_;
      totalMemory_ = other.totalMemory_;
      version_ = other.version_;
      label_ = other.label_;
      disconvert_ = other.disconvert_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    /// <summary>
    /// 内网地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 类型   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    /// 端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private global::Proto3.EServerStatus state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.EServerStatus State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 6;
    private int online_;
    /// <summary>
    /// 在线人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "maxUserCount" field.</summary>
    public const int MaxUserCountFieldNumber = 7;
    private int maxUserCount_;
    /// <summary>
    /// 在线人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUserCount {
      get { return maxUserCount_; }
      set {
        maxUserCount_ = value;
      }
    }

    /// <summary>Field number for the "httpport" field.</summary>
    public const int HttpportFieldNumber = 8;
    private int httpport_;
    /// <summary>
    /// http端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Httpport {
      get { return httpport_; }
      set {
        httpport_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mqName" field.</summary>
    public const int MqNameFieldNumber = 10;
    private string mqName_ = "";
    /// <summary>
    ///mq名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MqName {
      get { return mqName_; }
      set {
        mqName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wwwip" field.</summary>
    public const int WwwipFieldNumber = 11;
    private string wwwip_ = "";
    /// <summary>
    /// 外网地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wwwip {
      get { return wwwip_; }
      set {
        wwwip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "useMemory" field.</summary>
    public const int UseMemoryFieldNumber = 12;
    private long useMemory_;
    /// <summary>
    ///使用内存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UseMemory {
      get { return useMemory_; }
      set {
        useMemory_ = value;
      }
    }

    /// <summary>Field number for the "freeMemory" field.</summary>
    public const int FreeMemoryFieldNumber = 13;
    private long freeMemory_;
    /// <summary>
    ///空闲内存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FreeMemory {
      get { return freeMemory_; }
      set {
        freeMemory_ = value;
      }
    }

    /// <summary>Field number for the "totalMemory" field.</summary>
    public const int TotalMemoryFieldNumber = 14;
    private long totalMemory_;
    /// <summary>
    ///总内存
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalMemory {
      get { return totalMemory_; }
      set {
        totalMemory_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 15;
    private string version_ = "";
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 16;
    private string label_ = "";
    /// <summary>
    ///标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disconvert" field.</summary>
    public const int DisconvertFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Proto3.ServerDisconver> _repeated_disconvert_codec
        = pb::FieldCodec.ForMessage(138, global::Proto3.ServerDisconver.Parser);
    private readonly pbc::RepeatedField<global::Proto3.ServerDisconver> disconvert_ = new pbc::RepeatedField<global::Proto3.ServerDisconver>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.ServerDisconver> Disconvert {
      get { return disconvert_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ip != other.Ip) return false;
      if (Type != other.Type) return false;
      if (Port != other.Port) return false;
      if (State != other.State) return false;
      if (Online != other.Online) return false;
      if (MaxUserCount != other.MaxUserCount) return false;
      if (Httpport != other.Httpport) return false;
      if (Name != other.Name) return false;
      if (MqName != other.MqName) return false;
      if (Wwwip != other.Wwwip) return false;
      if (UseMemory != other.UseMemory) return false;
      if (FreeMemory != other.FreeMemory) return false;
      if (TotalMemory != other.TotalMemory) return false;
      if (Version != other.Version) return false;
      if (Label != other.Label) return false;
      if(!disconvert_.Equals(other.disconvert_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Online != 0) hash ^= Online.GetHashCode();
      if (MaxUserCount != 0) hash ^= MaxUserCount.GetHashCode();
      if (Httpport != 0) hash ^= Httpport.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MqName.Length != 0) hash ^= MqName.GetHashCode();
      if (Wwwip.Length != 0) hash ^= Wwwip.GetHashCode();
      if (UseMemory != 0L) hash ^= UseMemory.GetHashCode();
      if (FreeMemory != 0L) hash ^= FreeMemory.GetHashCode();
      if (TotalMemory != 0L) hash ^= TotalMemory.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= disconvert_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) State);
      }
      if (Online != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Online);
      }
      if (MaxUserCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxUserCount);
      }
      if (Httpport != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Httpport);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
      if (MqName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MqName);
      }
      if (Wwwip.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Wwwip);
      }
      if (UseMemory != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(UseMemory);
      }
      if (FreeMemory != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(FreeMemory);
      }
      if (TotalMemory != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(TotalMemory);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Version);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Label);
      }
      disconvert_.WriteTo(output, _repeated_disconvert_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      if (MaxUserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserCount);
      }
      if (Httpport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Httpport);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MqName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MqName);
      }
      if (Wwwip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wwwip);
      }
      if (UseMemory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UseMemory);
      }
      if (FreeMemory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FreeMemory);
      }
      if (TotalMemory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalMemory);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Label.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += disconvert_.CalculateSize(_repeated_disconvert_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Online != 0) {
        Online = other.Online;
      }
      if (other.MaxUserCount != 0) {
        MaxUserCount = other.MaxUserCount;
      }
      if (other.Httpport != 0) {
        Httpport = other.Httpport;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MqName.Length != 0) {
        MqName = other.MqName;
      }
      if (other.Wwwip.Length != 0) {
        Wwwip = other.Wwwip;
      }
      if (other.UseMemory != 0L) {
        UseMemory = other.UseMemory;
      }
      if (other.FreeMemory != 0L) {
        FreeMemory = other.FreeMemory;
      }
      if (other.TotalMemory != 0L) {
        TotalMemory = other.TotalMemory;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      disconvert_.Add(other.disconvert_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
          case 40: {
            state_ = (global::Proto3.EServerStatus) input.ReadEnum();
            break;
          }
          case 48: {
            Online = input.ReadInt32();
            break;
          }
          case 56: {
            MaxUserCount = input.ReadInt32();
            break;
          }
          case 64: {
            Httpport = input.ReadInt32();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
          case 82: {
            MqName = input.ReadString();
            break;
          }
          case 90: {
            Wwwip = input.ReadString();
            break;
          }
          case 96: {
            UseMemory = input.ReadInt64();
            break;
          }
          case 104: {
            FreeMemory = input.ReadInt64();
            break;
          }
          case 112: {
            TotalMemory = input.ReadInt64();
            break;
          }
          case 122: {
            Version = input.ReadString();
            break;
          }
          case 130: {
            Label = input.ReadString();
            break;
          }
          case 138: {
            disconvert_.AddEntriesFrom(input, _repeated_disconvert_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端请求服务器登录列表
  /// </summary>
  public sealed partial class ServerLoginListRequest : pb::IMessage<ServerLoginListRequest> {
    private static readonly pb::MessageParser<ServerLoginListRequest> _parser = new pb::MessageParser<ServerLoginListRequest>(() => new ServerLoginListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerLoginListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoginListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoginListRequest(ServerLoginListRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoginListRequest Clone() {
      return new ServerLoginListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerLoginListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerLoginListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerLoginListRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///客户端请求服务器登录列表
  /// </summary>
  public sealed partial class ServerLoginListResponse : pb::IMessage<ServerLoginListResponse> {
    private static readonly pb::MessageParser<ServerLoginListResponse> _parser = new pb::MessageParser<ServerLoginListResponse>(() => new ServerLoginListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerLoginListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoginListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoginListResponse(ServerLoginListResponse other) : this() {
      hotUpdateServer_ = other.hotUpdateServer_ != null ? other.hotUpdateServer_.Clone() : null;
      gateServers_ = other.gateServers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerLoginListResponse Clone() {
      return new ServerLoginListResponse(this);
    }

    /// <summary>Field number for the "hotUpdateServer" field.</summary>
    public const int HotUpdateServerFieldNumber = 1;
    private global::Proto3.ClientServerInfo hotUpdateServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.ClientServerInfo HotUpdateServer {
      get { return hotUpdateServer_; }
      set {
        hotUpdateServer_ = value;
      }
    }

    /// <summary>Field number for the "gateServers" field.</summary>
    public const int GateServersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.ClientServerInfo> _repeated_gateServers_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.ClientServerInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.ClientServerInfo> gateServers_ = new pbc::RepeatedField<global::Proto3.ClientServerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.ClientServerInfo> GateServers {
      get { return gateServers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerLoginListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerLoginListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HotUpdateServer, other.HotUpdateServer)) return false;
      if(!gateServers_.Equals(other.gateServers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hotUpdateServer_ != null) hash ^= HotUpdateServer.GetHashCode();
      hash ^= gateServers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hotUpdateServer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HotUpdateServer);
      }
      gateServers_.WriteTo(output, _repeated_gateServers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hotUpdateServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HotUpdateServer);
      }
      size += gateServers_.CalculateSize(_repeated_gateServers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerLoginListResponse other) {
      if (other == null) {
        return;
      }
      if (other.hotUpdateServer_ != null) {
        if (hotUpdateServer_ == null) {
          hotUpdateServer_ = new global::Proto3.ClientServerInfo();
        }
        HotUpdateServer.MergeFrom(other.HotUpdateServer);
      }
      gateServers_.Add(other.gateServers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hotUpdateServer_ == null) {
              hotUpdateServer_ = new global::Proto3.ClientServerInfo();
            }
            input.ReadMessage(hotUpdateServer_);
            break;
          }
          case 18: {
            gateServers_.AddEntriesFrom(input, _repeated_gateServers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerCmdRequest : pb::IMessage<ServerCmdRequest> {
    private static readonly pb::MessageParser<ServerCmdRequest> _parser = new pb::MessageParser<ServerCmdRequest>(() => new ServerCmdRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerCmdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCmdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCmdRequest(ServerCmdRequest other) : this() {
      cmd_ = other.cmd_;
      cmdParam_ = other.cmdParam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCmdRequest Clone() {
      return new ServerCmdRequest(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private string cmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmdParam" field.</summary>
    public const int CmdParamFieldNumber = 2;
    private string cmdParam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdParam {
      get { return cmdParam_; }
      set {
        cmdParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerCmdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerCmdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (CmdParam != other.CmdParam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (CmdParam.Length != 0) hash ^= CmdParam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cmd);
      }
      if (CmdParam.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CmdParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (CmdParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdParam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerCmdRequest other) {
      if (other == null) {
        return;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.CmdParam.Length != 0) {
        CmdParam = other.CmdParam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cmd = input.ReadString();
            break;
          }
          case 18: {
            CmdParam = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LinkServerChangeResponse : pb::IMessage<LinkServerChangeResponse> {
    private static readonly pb::MessageParser<LinkServerChangeResponse> _parser = new pb::MessageParser<LinkServerChangeResponse>(() => new LinkServerChangeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkServerChangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkServerChangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkServerChangeResponse(LinkServerChangeResponse other) : this() {
      userId_ = other.userId_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkServerChangeResponse Clone() {
      return new LinkServerChangeResponse(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinkServerChangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinkServerChangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinkServerChangeResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WebGmRequest : pb::IMessage<WebGmRequest> {
    private static readonly pb::MessageParser<WebGmRequest> _parser = new pb::MessageParser<WebGmRequest>(() => new WebGmRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WebGmRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebGmRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebGmRequest(WebGmRequest other) : this() {
      userID_ = other.userID_;
      key_ = other.key_;
      parameterList_ = other.parameterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebGmRequest Clone() {
      return new WebGmRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameterList" field.</summary>
    public const int ParameterListFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_parameterList_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> parameterList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ParameterList {
      get { return parameterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WebGmRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WebGmRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Key != other.Key) return false;
      if(!parameterList_.Equals(other.parameterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      hash ^= parameterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      parameterList_.WriteTo(output, _repeated_parameterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      size += parameterList_.CalculateSize(_repeated_parameterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WebGmRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      parameterList_.Add(other.parameterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            parameterList_.AddEntriesFrom(input, _repeated_parameterList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WebSendNoticeRequest : pb::IMessage<WebSendNoticeRequest> {
    private static readonly pb::MessageParser<WebSendNoticeRequest> _parser = new pb::MessageParser<WebSendNoticeRequest>(() => new WebSendNoticeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WebSendNoticeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebSendNoticeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebSendNoticeRequest(WebSendNoticeRequest other) : this() {
      userID_ = other.userID_;
      notice_ = other.notice_;
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebSendNoticeRequest Clone() {
      return new WebSendNoticeRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 2;
    private string notice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WebSendNoticeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WebSendNoticeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Notice != other.Notice) return false;
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Notice);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WebSendNoticeRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            Notice = input.ReadString();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WebToggleHotRequest : pb::IMessage<WebToggleHotRequest> {
    private static readonly pb::MessageParser<WebToggleHotRequest> _parser = new pb::MessageParser<WebToggleHotRequest>(() => new WebToggleHotRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WebToggleHotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebToggleHotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebToggleHotRequest(WebToggleHotRequest other) : this() {
      toggleHot_ = other.toggleHot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebToggleHotRequest Clone() {
      return new WebToggleHotRequest(this);
    }

    /// <summary>Field number for the "toggleHot" field.</summary>
    public const int ToggleHotFieldNumber = 1;
    private bool toggleHot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ToggleHot {
      get { return toggleHot_; }
      set {
        toggleHot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WebToggleHotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WebToggleHotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ToggleHot != other.ToggleHot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ToggleHot != false) hash ^= ToggleHot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ToggleHot != false) {
        output.WriteRawTag(8);
        output.WriteBool(ToggleHot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ToggleHot != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WebToggleHotRequest other) {
      if (other == null) {
        return;
      }
      if (other.ToggleHot != false) {
        ToggleHot = other.ToggleHot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ToggleHot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WebGmResponse : pb::IMessage<WebGmResponse> {
    private static readonly pb::MessageParser<WebGmResponse> _parser = new pb::MessageParser<WebGmResponse>(() => new WebGmResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WebGmResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.ServerMessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebGmResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebGmResponse(WebGmResponse other) : this() {
      userID_ = other.userID_;
      success_ = other.success_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebGmResponse Clone() {
      return new WebGmResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WebGmResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WebGmResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Success != other.Success) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WebGmResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
