// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/matchroom/MatchRoom.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from proto/matchroom/MatchRoom.proto</summary>
  public static partial class MatchRoomReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/matchroom/MatchRoom.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchRoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9wcm90by9tYXRjaHJvb20vTWF0Y2hSb29tLnByb3RvGiBwcm90by9jb21t",
            "b24vQ29tbW9uTWVzc2FnZS5wcm90byKzAQoMUm9vbVVzZXJJbmZvEg4KBnVz",
            "ZXJJZBgBIAEoAxIOCgZhdmF0YXIYAiABKAUSDAoEbmFtZRgDIAEoCRIjCgZz",
            "dGF0dXMYBCABKA4yEy5ST09NX0JBVFRMRV9TVEFUVVMSDAoEaXNBSRgFIAEo",
            "CBIVCg1hY2hpZXZlbWVudEx2GAYgASgFEgwKBHJhbmsYByABKAUSHQoEaGVy",
            "bxgIIAEoCzIPLkhlcm9CYXR0bGVEYXRhIj8KEEVudGVyUm9vbVJlcXVlc3QS",
            "GwoEZGF0YRgBIAEoCzINLlJvb21Vc2VySW5mbxIOCgZyb29tSUQYAiABKAUi",
            "qwEKEUVudGVyUm9vbVJlc3BvbnNlEg4KBnVzZXJJRBgBIAEoAxIOCgZyb29t",
            "SUQYAiABKAUSEQoJZnJhbWVNb2RlGAMgASgFEhUKDWZyYW1lSW50ZXJ2YWwY",
            "BCABKAUSFQoNbWF0Y2hUaW1lZG93bhgFIAEoBRIVCg1zdGFydFRpbWVkb3du",
            "GAYgASgFEh4KB21lbWJlcnMYByADKAsyDS5Sb29tVXNlckluZm8iOQoXTm90",
            "aWZ5TWF0Y2hSb29tUmVzcG9uc2USDgoGdXNlcklEGAEgASgDEg4KBnJvb21J",
            "RBgCIAEoBSIyChBMZWF2ZVJvb21SZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAxIO",
            "CgZyb29tSUQYAiABKAUiMwoRTGVhdmVSb29tUmVzcG9uc2USDgoGdXNlcklE",
            "GAEgASgDEg4KBnJvb21JRBgCIAEoBSJHChVOb3RpZnlBZGRSb29tUmVzcG9u",
            "c2USDgoGcm9vbUlEGAEgASgFEh4KB21lbWJlcnMYAiADKAsyDS5Sb29tVXNl",
            "ckluZm8iXgoXUm9vbUJhdHRsZVN0YXR1c1JlcXVlc3QSDgoGdXNlcklEGAEg",
            "ASgDEg4KBnJvb21JRBgCIAEoBRIjCgZzdGF0dXMYAyABKA4yEy5ST09NX0JB",
            "VFRMRV9TVEFUVVMibgoYUm9vbUJhdHRsZVN0YXR1c1Jlc3BvbnNlEg4KBnVz",
            "ZXJJRBgBIAEoAxIOCgZyb29tSUQYAiABKAUSIwoGc3RhdHVzGAMgASgOMhMu",
            "Uk9PTV9CQVRUTEVfU1RBVFVTEg0KBWVycm9yGAQgASgFIkMKHU5vdGlmeVJv",
            "b21CYXR0bGVTdGFydFJlc3BvbnNlEg4KBnJvb21JRBgBIAEoBRISCgpyYW5k",
            "b21TZWVkGAIgASgDIkAKG05vdGlmeVJvb21CYXR0bGVFbmRSZXNwb25zZRIO",
            "CgZyb29tSUQYASABKAUSEQoJdXNlclJhbmtzGAIgAygDIjYKFFJvb21GcmFt",
            "ZVBpbmdSZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAxIOCgZyb29tSUQYAiABKAUi",
            "WQoVUm9vbUZyYW1lUGluZ1Jlc3BvbnNlEg4KBnVzZXJJRBgBIAEoAxIOCgZy",
            "b29tSUQYAiABKAUSDQoFZnJhbWUYAyABKAMSEQoJZnJhbWVUaW1lGAQgASgD",
            "ImwKEEZyYW1lQ29tbWFuZEluZm8SDgoGdXNlcklEGAEgASgDEgwKBHR5cGUY",
            "AiABKAUSDQoFZGF0YTEYAyABKAUSDQoFZGF0YTIYBCABKAUSDQoFZGF0YTMY",
            "BSABKAUSDQoFZGF0YTQYBiABKAUifQoUUm9vbUZyYW1lU3RlcFJlcXVlc3QS",
            "DgoGdXNlcklEGAEgASgDEg4KBnJvb21JRBgCIAEoBRINCgVmcmFtZRgDIAEo",
            "AxIRCglmcmFtZVRpbWUYBCABKAMSIwoIY29tbWFuZHMYBSADKAsyES5GcmFt",
            "ZUNvbW1hbmRJbmZvIm4KFVJvb21GcmFtZVN0ZXBSZXNwb25zZRIOCgZyb29t",
            "SUQYAiABKAUSDQoFZnJhbWUYAyABKAMSEQoJZnJhbWVUaW1lGAQgASgDEiMK",
            "CGNvbW1hbmRzGAUgAygLMhEuRnJhbWVDb21tYW5kSW5mbyqZAQoSUk9PTV9C",
            "QVRUTEVfU1RBVFVTEgsKB1Vua25vd24QABILCgdQcmVwYXJlEAESCQoFUmVh",
            "ZHkQAhILCgdSZWFkeU9rEAMSDgoKUmVhZHlTdGFydBAEEgkKBUxlYXZlEAUS",
            "EwoPQnJlYWtEaXNjb25uZWN0EAYSCAoERGVhZBAHEgoKBlJldmljZRAIEgsK",
            "B1ZpY3RvcnkQCUIeChNjb20udG9wZ2FtZS5tZXNzYWdlqgIGUHJvdG8zYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto3.CommonMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.ROOM_BATTLE_STATUS), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RoomUserInfo), global::Proto3.RoomUserInfo.Parser, new[]{ "UserId", "Avatar", "Name", "Status", "IsAI", "AchievementLv", "Rank", "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.EnterRoomRequest), global::Proto3.EnterRoomRequest.Parser, new[]{ "Data", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.EnterRoomResponse), global::Proto3.EnterRoomResponse.Parser, new[]{ "UserID", "RoomID", "FrameMode", "FrameInterval", "MatchTimedown", "StartTimedown", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.NotifyMatchRoomResponse), global::Proto3.NotifyMatchRoomResponse.Parser, new[]{ "UserID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LeaveRoomRequest), global::Proto3.LeaveRoomRequest.Parser, new[]{ "UserID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LeaveRoomResponse), global::Proto3.LeaveRoomResponse.Parser, new[]{ "UserID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.NotifyAddRoomResponse), global::Proto3.NotifyAddRoomResponse.Parser, new[]{ "RoomID", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RoomBattleStatusRequest), global::Proto3.RoomBattleStatusRequest.Parser, new[]{ "UserID", "RoomID", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RoomBattleStatusResponse), global::Proto3.RoomBattleStatusResponse.Parser, new[]{ "UserID", "RoomID", "Status", "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.NotifyRoomBattleStartResponse), global::Proto3.NotifyRoomBattleStartResponse.Parser, new[]{ "RoomID", "RandomSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.NotifyRoomBattleEndResponse), global::Proto3.NotifyRoomBattleEndResponse.Parser, new[]{ "RoomID", "UserRanks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RoomFramePingRequest), global::Proto3.RoomFramePingRequest.Parser, new[]{ "UserID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RoomFramePingResponse), global::Proto3.RoomFramePingResponse.Parser, new[]{ "UserID", "RoomID", "Frame", "FrameTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.FrameCommandInfo), global::Proto3.FrameCommandInfo.Parser, new[]{ "UserID", "Type", "Data1", "Data2", "Data3", "Data4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RoomFrameStepRequest), global::Proto3.RoomFrameStepRequest.Parser, new[]{ "UserID", "RoomID", "Frame", "FrameTime", "Commands" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RoomFrameStepResponse), global::Proto3.RoomFrameStepResponse.Parser, new[]{ "RoomID", "Frame", "FrameTime", "Commands" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ROOM_BATTLE_STATUS {
    [pbr::OriginalName("Unknown")] Unknown = 0,
    /// <summary>
    ///准备状态
    /// </summary>
    [pbr::OriginalName("Prepare")] Prepare = 1,
    /// <summary>
    ///准备完成，进入预备状态，（ex:进入加载）
    /// </summary>
    [pbr::OriginalName("Ready")] Ready = 2,
    /// <summary>
    ///预备状态已完成
    /// </summary>
    [pbr::OriginalName("ReadyOk")] ReadyOk = 3,
    /// <summary>
    ///准备完成，进入预备状态，（ex:进度条已加载完成）
    /// </summary>
    [pbr::OriginalName("ReadyStart")] ReadyStart = 4,
    /// <summary>
    ///离开
    /// </summary>
    [pbr::OriginalName("Leave")] Leave = 5,
    /// <summary>
    ///断线
    /// </summary>
    [pbr::OriginalName("BreakDisconnect")] BreakDisconnect = 6,
    /// <summary>
    ///死亡
    /// </summary>
    [pbr::OriginalName("Dead")] Dead = 7,
    /// <summary>
    ///复活
    /// </summary>
    [pbr::OriginalName("Revice")] Revice = 8,
    /// <summary>
    ///胜利
    /// </summary>
    [pbr::OriginalName("Victory")] Victory = 9,
  }

  #endregion

  #region Messages
  /// <summary>
  ///单位同步数据
  /// </summary>
  public sealed partial class RoomUserInfo : pb::IMessage<RoomUserInfo> {
    private static readonly pb::MessageParser<RoomUserInfo> _parser = new pb::MessageParser<RoomUserInfo>(() => new RoomUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserInfo(RoomUserInfo other) : this() {
      userId_ = other.userId_;
      avatar_ = other.avatar_;
      name_ = other.name_;
      status_ = other.status_;
      isAI_ = other.isAI_;
      achievementLv_ = other.achievementLv_;
      rank_ = other.rank_;
      hero_ = other.hero_ != null ? other.hero_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomUserInfo Clone() {
      return new RoomUserInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 2;
    private int avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Proto3.ROOM_BATTLE_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.ROOM_BATTLE_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "isAI" field.</summary>
    public const int IsAIFieldNumber = 5;
    private bool isAI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAI {
      get { return isAI_; }
      set {
        isAI_ = value;
      }
    }

    /// <summary>Field number for the "achievementLv" field.</summary>
    public const int AchievementLvFieldNumber = 6;
    private int achievementLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AchievementLv {
      get { return achievementLv_; }
      set {
        achievementLv_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 7;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "hero" field.</summary>
    public const int HeroFieldNumber = 8;
    private global::Proto3.HeroBattleData hero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.HeroBattleData Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Avatar != other.Avatar) return false;
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      if (IsAI != other.IsAI) return false;
      if (AchievementLv != other.AchievementLv) return false;
      if (Rank != other.Rank) return false;
      if (!object.Equals(Hero, other.Hero)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Avatar != 0) hash ^= Avatar.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (IsAI != false) hash ^= IsAI.GetHashCode();
      if (AchievementLv != 0) hash ^= AchievementLv.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (hero_ != null) hash ^= Hero.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Avatar != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Avatar);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (IsAI != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAI);
      }
      if (AchievementLv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AchievementLv);
      }
      if (Rank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Rank);
      }
      if (hero_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Hero);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Avatar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Avatar);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (IsAI != false) {
        size += 1 + 1;
      }
      if (AchievementLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AchievementLv);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Avatar != 0) {
        Avatar = other.Avatar;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.IsAI != false) {
        IsAI = other.IsAI;
      }
      if (other.AchievementLv != 0) {
        AchievementLv = other.AchievementLv;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          hero_ = new global::Proto3.HeroBattleData();
        }
        Hero.MergeFrom(other.Hero);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Avatar = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            status_ = (global::Proto3.ROOM_BATTLE_STATUS) input.ReadEnum();
            break;
          }
          case 40: {
            IsAI = input.ReadBool();
            break;
          }
          case 48: {
            AchievementLv = input.ReadInt32();
            break;
          }
          case 56: {
            Rank = input.ReadInt32();
            break;
          }
          case 66: {
            if (hero_ == null) {
              hero_ = new global::Proto3.HeroBattleData();
            }
            input.ReadMessage(hero_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///进入房间
  /// </summary>
  public sealed partial class EnterRoomRequest : pb::IMessage<EnterRoomRequest> {
    private static readonly pb::MessageParser<EnterRoomRequest> _parser = new pb::MessageParser<EnterRoomRequest>(() => new EnterRoomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRequest(EnterRoomRequest other) : this() {
      data_ = other.data_ != null ? other.data_.Clone() : null;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRequest Clone() {
      return new EnterRoomRequest(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Proto3.RoomUserInfo data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.RoomUserInfo Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoomRequest other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Proto3.RoomUserInfo();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Proto3.RoomUserInfo();
            }
            input.ReadMessage(data_);
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterRoomResponse : pb::IMessage<EnterRoomResponse> {
    private static readonly pb::MessageParser<EnterRoomResponse> _parser = new pb::MessageParser<EnterRoomResponse>(() => new EnterRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomResponse(EnterRoomResponse other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      frameMode_ = other.frameMode_;
      frameInterval_ = other.frameInterval_;
      matchTimedown_ = other.matchTimedown_;
      startTimedown_ = other.startTimedown_;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomResponse Clone() {
      return new EnterRoomResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "frameMode" field.</summary>
    public const int FrameModeFieldNumber = 3;
    private int frameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameMode {
      get { return frameMode_; }
      set {
        frameMode_ = value;
      }
    }

    /// <summary>Field number for the "frameInterval" field.</summary>
    public const int FrameIntervalFieldNumber = 4;
    private int frameInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameInterval {
      get { return frameInterval_; }
      set {
        frameInterval_ = value;
      }
    }

    /// <summary>Field number for the "matchTimedown" field.</summary>
    public const int MatchTimedownFieldNumber = 5;
    private int matchTimedown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchTimedown {
      get { return matchTimedown_; }
      set {
        matchTimedown_ = value;
      }
    }

    /// <summary>Field number for the "startTimedown" field.</summary>
    public const int StartTimedownFieldNumber = 6;
    private int startTimedown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTimedown {
      get { return startTimedown_; }
      set {
        startTimedown_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Proto3.RoomUserInfo> _repeated_members_codec
        = pb::FieldCodec.ForMessage(58, global::Proto3.RoomUserInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.RoomUserInfo> members_ = new pbc::RepeatedField<global::Proto3.RoomUserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.RoomUserInfo> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (FrameMode != other.FrameMode) return false;
      if (FrameInterval != other.FrameInterval) return false;
      if (MatchTimedown != other.MatchTimedown) return false;
      if (StartTimedown != other.StartTimedown) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (FrameMode != 0) hash ^= FrameMode.GetHashCode();
      if (FrameInterval != 0) hash ^= FrameInterval.GetHashCode();
      if (MatchTimedown != 0) hash ^= MatchTimedown.GetHashCode();
      if (StartTimedown != 0) hash ^= StartTimedown.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (FrameMode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FrameMode);
      }
      if (FrameInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FrameInterval);
      }
      if (MatchTimedown != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MatchTimedown);
      }
      if (StartTimedown != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StartTimedown);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (FrameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameMode);
      }
      if (FrameInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameInterval);
      }
      if (MatchTimedown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchTimedown);
      }
      if (StartTimedown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTimedown);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoomResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.FrameMode != 0) {
        FrameMode = other.FrameMode;
      }
      if (other.FrameInterval != 0) {
        FrameInterval = other.FrameInterval;
      }
      if (other.MatchTimedown != 0) {
        MatchTimedown = other.MatchTimedown;
      }
      if (other.StartTimedown != 0) {
        StartTimedown = other.StartTimedown;
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            FrameMode = input.ReadInt32();
            break;
          }
          case 32: {
            FrameInterval = input.ReadInt32();
            break;
          }
          case 40: {
            MatchTimedown = input.ReadInt32();
            break;
          }
          case 48: {
            StartTimedown = input.ReadInt32();
            break;
          }
          case 58: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyMatchRoomResponse : pb::IMessage<NotifyMatchRoomResponse> {
    private static readonly pb::MessageParser<NotifyMatchRoomResponse> _parser = new pb::MessageParser<NotifyMatchRoomResponse>(() => new NotifyMatchRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyMatchRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchRoomResponse(NotifyMatchRoomResponse other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyMatchRoomResponse Clone() {
      return new NotifyMatchRoomResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyMatchRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyMatchRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyMatchRoomResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///离开房间
  /// </summary>
  public sealed partial class LeaveRoomRequest : pb::IMessage<LeaveRoomRequest> {
    private static readonly pb::MessageParser<LeaveRoomRequest> _parser = new pb::MessageParser<LeaveRoomRequest>(() => new LeaveRoomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRequest(LeaveRoomRequest other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRequest Clone() {
      return new LeaveRoomRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveRoomResponse : pb::IMessage<LeaveRoomResponse> {
    private static readonly pb::MessageParser<LeaveRoomResponse> _parser = new pb::MessageParser<LeaveRoomResponse>(() => new LeaveRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomResponse(LeaveRoomResponse other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomResponse Clone() {
      return new LeaveRoomResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间成员加入通知
  /// </summary>
  public sealed partial class NotifyAddRoomResponse : pb::IMessage<NotifyAddRoomResponse> {
    private static readonly pb::MessageParser<NotifyAddRoomResponse> _parser = new pb::MessageParser<NotifyAddRoomResponse>(() => new NotifyAddRoomResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyAddRoomResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAddRoomResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAddRoomResponse(NotifyAddRoomResponse other) : this() {
      roomID_ = other.roomID_;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyAddRoomResponse Clone() {
      return new NotifyAddRoomResponse(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.RoomUserInfo> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.RoomUserInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.RoomUserInfo> members_ = new pbc::RepeatedField<global::Proto3.RoomUserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.RoomUserInfo> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyAddRoomResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyAddRoomResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyAddRoomResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房间成员状态
  /// </summary>
  public sealed partial class RoomBattleStatusRequest : pb::IMessage<RoomBattleStatusRequest> {
    private static readonly pb::MessageParser<RoomBattleStatusRequest> _parser = new pb::MessageParser<RoomBattleStatusRequest>(() => new RoomBattleStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStatusRequest(RoomBattleStatusRequest other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStatusRequest Clone() {
      return new RoomBattleStatusRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Proto3.ROOM_BATTLE_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.ROOM_BATTLE_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            status_ = (global::Proto3.ROOM_BATTLE_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomBattleStatusResponse : pb::IMessage<RoomBattleStatusResponse> {
    private static readonly pb::MessageParser<RoomBattleStatusResponse> _parser = new pb::MessageParser<RoomBattleStatusResponse>(() => new RoomBattleStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomBattleStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStatusResponse(RoomBattleStatusResponse other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      status_ = other.status_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomBattleStatusResponse Clone() {
      return new RoomBattleStatusResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Proto3.ROOM_BATTLE_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.ROOM_BATTLE_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomBattleStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomBattleStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (Status != other.Status) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Error != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Error != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomBattleStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            status_ = (global::Proto3.ROOM_BATTLE_STATUS) input.ReadEnum();
            break;
          }
          case 32: {
            Error = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知房间战斗开始
  /// </summary>
  public sealed partial class NotifyRoomBattleStartResponse : pb::IMessage<NotifyRoomBattleStartResponse> {
    private static readonly pb::MessageParser<NotifyRoomBattleStartResponse> _parser = new pb::MessageParser<NotifyRoomBattleStartResponse>(() => new NotifyRoomBattleStartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRoomBattleStartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomBattleStartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomBattleStartResponse(NotifyRoomBattleStartResponse other) : this() {
      roomID_ = other.roomID_;
      randomSeed_ = other.randomSeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomBattleStartResponse Clone() {
      return new NotifyRoomBattleStartResponse(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 2;
    private long randomSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRoomBattleStartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRoomBattleStartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (RandomSeed != other.RandomSeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      if (RandomSeed != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RandomSeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (RandomSeed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRoomBattleStartResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 16: {
            RandomSeed = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知房间战斗结束
  /// </summary>
  public sealed partial class NotifyRoomBattleEndResponse : pb::IMessage<NotifyRoomBattleEndResponse> {
    private static readonly pb::MessageParser<NotifyRoomBattleEndResponse> _parser = new pb::MessageParser<NotifyRoomBattleEndResponse>(() => new NotifyRoomBattleEndResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRoomBattleEndResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomBattleEndResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomBattleEndResponse(NotifyRoomBattleEndResponse other) : this() {
      roomID_ = other.roomID_;
      userRanks_ = other.userRanks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomBattleEndResponse Clone() {
      return new NotifyRoomBattleEndResponse(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userRanks" field.</summary>
    public const int UserRanksFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_userRanks_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> userRanks_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UserRanks {
      get { return userRanks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRoomBattleEndResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRoomBattleEndResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if(!userRanks_.Equals(other.userRanks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      hash ^= userRanks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomID);
      }
      userRanks_.WriteTo(output, _repeated_userRanks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      size += userRanks_.CalculateSize(_repeated_userRanks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRoomBattleEndResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      userRanks_.Add(other.userRanks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            userRanks_.AddEntriesFrom(input, _repeated_userRanks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomFramePingRequest : pb::IMessage<RoomFramePingRequest> {
    private static readonly pb::MessageParser<RoomFramePingRequest> _parser = new pb::MessageParser<RoomFramePingRequest>(() => new RoomFramePingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomFramePingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFramePingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFramePingRequest(RoomFramePingRequest other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFramePingRequest Clone() {
      return new RoomFramePingRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomFramePingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomFramePingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomFramePingRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomFramePingResponse : pb::IMessage<RoomFramePingResponse> {
    private static readonly pb::MessageParser<RoomFramePingResponse> _parser = new pb::MessageParser<RoomFramePingResponse>(() => new RoomFramePingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomFramePingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFramePingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFramePingResponse(RoomFramePingResponse other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      frame_ = other.frame_;
      frameTime_ = other.frameTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFramePingResponse Clone() {
      return new RoomFramePingResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 3;
    private long frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frameTime" field.</summary>
    public const int FrameTimeFieldNumber = 4;
    private long frameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTime {
      get { return frameTime_; }
      set {
        frameTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomFramePingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomFramePingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (Frame != other.Frame) return false;
      if (FrameTime != other.FrameTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (Frame != 0L) hash ^= Frame.GetHashCode();
      if (FrameTime != 0L) hash ^= FrameTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (Frame != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Frame);
      }
      if (FrameTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (Frame != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frame);
      }
      if (FrameTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomFramePingResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.Frame != 0L) {
        Frame = other.Frame;
      }
      if (other.FrameTime != 0L) {
        FrameTime = other.FrameTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            Frame = input.ReadInt64();
            break;
          }
          case 32: {
            FrameTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位同步数据
  /// </summary>
  public sealed partial class FrameCommandInfo : pb::IMessage<FrameCommandInfo> {
    private static readonly pb::MessageParser<FrameCommandInfo> _parser = new pb::MessageParser<FrameCommandInfo>(() => new FrameCommandInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameCommandInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameCommandInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameCommandInfo(FrameCommandInfo other) : this() {
      userID_ = other.userID_;
      type_ = other.type_;
      data1_ = other.data1_;
      data2_ = other.data2_;
      data3_ = other.data3_;
      data4_ = other.data4_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameCommandInfo Clone() {
      return new FrameCommandInfo(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 同步类型   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data1" field.</summary>
    public const int Data1FieldNumber = 3;
    private int data1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data1 {
      get { return data1_; }
      set {
        data1_ = value;
      }
    }

    /// <summary>Field number for the "data2" field.</summary>
    public const int Data2FieldNumber = 4;
    private int data2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data2 {
      get { return data2_; }
      set {
        data2_ = value;
      }
    }

    /// <summary>Field number for the "data3" field.</summary>
    public const int Data3FieldNumber = 5;
    private int data3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data3 {
      get { return data3_; }
      set {
        data3_ = value;
      }
    }

    /// <summary>Field number for the "data4" field.</summary>
    public const int Data4FieldNumber = 6;
    private int data4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data4 {
      get { return data4_; }
      set {
        data4_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameCommandInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameCommandInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Type != other.Type) return false;
      if (Data1 != other.Data1) return false;
      if (Data2 != other.Data2) return false;
      if (Data3 != other.Data3) return false;
      if (Data4 != other.Data4) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Data1 != 0) hash ^= Data1.GetHashCode();
      if (Data2 != 0) hash ^= Data2.GetHashCode();
      if (Data3 != 0) hash ^= Data3.GetHashCode();
      if (Data4 != 0) hash ^= Data4.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Data1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Data1);
      }
      if (Data2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Data2);
      }
      if (Data3 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Data3);
      }
      if (Data4 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Data4);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Data1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data1);
      }
      if (Data2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data2);
      }
      if (Data3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data3);
      }
      if (Data4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data4);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameCommandInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Data1 != 0) {
        Data1 = other.Data1;
      }
      if (other.Data2 != 0) {
        Data2 = other.Data2;
      }
      if (other.Data3 != 0) {
        Data3 = other.Data3;
      }
      if (other.Data4 != 0) {
        Data4 = other.Data4;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Data1 = input.ReadInt32();
            break;
          }
          case 32: {
            Data2 = input.ReadInt32();
            break;
          }
          case 40: {
            Data3 = input.ReadInt32();
            break;
          }
          case 48: {
            Data4 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位同步消息请求
  /// </summary>
  public sealed partial class RoomFrameStepRequest : pb::IMessage<RoomFrameStepRequest> {
    private static readonly pb::MessageParser<RoomFrameStepRequest> _parser = new pb::MessageParser<RoomFrameStepRequest>(() => new RoomFrameStepRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomFrameStepRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFrameStepRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFrameStepRequest(RoomFrameStepRequest other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      frame_ = other.frame_;
      frameTime_ = other.frameTime_;
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFrameStepRequest Clone() {
      return new RoomFrameStepRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 3;
    private long frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frameTime" field.</summary>
    public const int FrameTimeFieldNumber = 4;
    private long frameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTime {
      get { return frameTime_; }
      set {
        frameTime_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto3.FrameCommandInfo> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(42, global::Proto3.FrameCommandInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.FrameCommandInfo> commands_ = new pbc::RepeatedField<global::Proto3.FrameCommandInfo>();
    /// <summary>
    ///服务器信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.FrameCommandInfo> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomFrameStepRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomFrameStepRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (Frame != other.Frame) return false;
      if (FrameTime != other.FrameTime) return false;
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (Frame != 0L) hash ^= Frame.GetHashCode();
      if (FrameTime != 0L) hash ^= FrameTime.GetHashCode();
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (Frame != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Frame);
      }
      if (FrameTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameTime);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (Frame != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frame);
      }
      if (FrameTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTime);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomFrameStepRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.Frame != 0L) {
        Frame = other.Frame;
      }
      if (other.FrameTime != 0L) {
        FrameTime = other.FrameTime;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            Frame = input.ReadInt64();
            break;
          }
          case 32: {
            FrameTime = input.ReadInt64();
            break;
          }
          case 42: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单位同步消息回复
  /// </summary>
  public sealed partial class RoomFrameStepResponse : pb::IMessage<RoomFrameStepResponse> {
    private static readonly pb::MessageParser<RoomFrameStepResponse> _parser = new pb::MessageParser<RoomFrameStepResponse>(() => new RoomFrameStepResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomFrameStepResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.MatchRoomReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFrameStepResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFrameStepResponse(RoomFrameStepResponse other) : this() {
      roomID_ = other.roomID_;
      frame_ = other.frame_;
      frameTime_ = other.frameTime_;
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFrameStepResponse Clone() {
      return new RoomFrameStepResponse(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 3;
    private long frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "frameTime" field.</summary>
    public const int FrameTimeFieldNumber = 4;
    private long frameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTime {
      get { return frameTime_; }
      set {
        frameTime_ = value;
      }
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto3.FrameCommandInfo> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(42, global::Proto3.FrameCommandInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.FrameCommandInfo> commands_ = new pbc::RepeatedField<global::Proto3.FrameCommandInfo>();
    /// <summary>
    ///服务器信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.FrameCommandInfo> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomFrameStepResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomFrameStepResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (Frame != other.Frame) return false;
      if (FrameTime != other.FrameTime) return false;
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (Frame != 0L) hash ^= Frame.GetHashCode();
      if (FrameTime != 0L) hash ^= FrameTime.GetHashCode();
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (Frame != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Frame);
      }
      if (FrameTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameTime);
      }
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (Frame != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Frame);
      }
      if (FrameTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTime);
      }
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomFrameStepResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.Frame != 0L) {
        Frame = other.Frame;
      }
      if (other.FrameTime != 0L) {
        FrameTime = other.FrameTime;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            Frame = input.ReadInt64();
            break;
          }
          case 32: {
            FrameTime = input.ReadInt64();
            break;
          }
          case 42: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
