// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/hall/HallLoginMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from proto/hall/HallLoginMessage.proto</summary>
  public static partial class HallLoginMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/hall/HallLoginMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HallLoginMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFwcm90by9oYWxsL0hhbGxMb2dpbk1lc3NhZ2UucHJvdG8aIHByb3RvL2Nv",
            "bW1vbi9Db21tb25NZXNzYWdlLnByb3RvIp8CChJMb2dpblZlcmlmeVJlcXVl",
            "c3QSDwoHYWNjb3VudBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCRIQCghuaWNr",
            "TmFtZRgDIAEoCRIZChFyZWdpc3RyYXRpb25Ub2tlbhgEIAEoCRIPCgd2ZXJz",
            "aW9uGAUgASgJEhIKCmF1dG9DcmVhdGUYBiABKAgSHQoJbG9naW5UeXBlGAcg",
            "ASgOMgouTG9naW5UeXBlEhIKCmRldmljZUdVSUQYCCABKAkSDgoGb3NJbmZv",
            "GAkgASgJEhIKCmRldmljZVR5cGUYCiABKAkSEwoLZGV2aWNlTW9kZWwYCyAB",
            "KAkSFAoMbG9naW5DaGFubmVsGAwgASgJEhIKCnN1YkNoYW5uZWwYDSABKAki",
            "ywEKE0xvZ2luVmVyaWZ5UmVzcG9uc2USDwoHYWNjb3VudBgBIAEoCRIQCghw",
            "YXNzd29yZBgCIAEoCRIOCgZ1c2VySWQYAyABKAMSGQoRcmVnaXN0cmF0aW9u",
            "VG9rZW4YBCABKAkSEAoIbmlja05hbWUYBSABKAkSFAoMbG9naW5DaGFubmVs",
            "GAYgASgJEh0KCWxvZ2luVHlwZRgHIAEoDjIKLkxvZ2luVHlwZRIfCgRnYXRl",
            "GAggASgLMhEuQ2xpZW50U2VydmVySW5mbyJhCgxMb2dpblJlcXVlc3QSEQoJ",
            "YWNjb3VudElEGAEgASgDEhAKCG5pY2tOYW1lGAIgASgJEhYKDmlzUmVjb25u",
            "ZWN0aW9uGAMgASgIEhQKDGlzTGlua0NoYW5nZRgEIAEoCCLQAQoNTG9naW5S",
            "ZXNwb25zZRIRCglhY2NvdW50SUQYASABKAMSEAoIaXNDcmVhdGUYAiABKAgS",
            "EgoKb25saW5lVGltZRgDIAEoBRIQCghuaWNrTmFtZRgEIAEoCRIWCg5pc1Jl",
            "Y29ubmVjdGlvbhgFIAEoCBIdChV1bmRlcmFnZVJlbWFpbmluZ1RpbWUYBiAB",
            "KAUSFQoNbmlja05hbWVDVGltZRgHIAEoBRISCgppc0ZpcnN0QnV5GAggASgI",
            "EhIKCnNwZWNpYWxOdW0YCSABKAUidQoUVXNlckJhc2VJbmZvUmVzcG9uc2US",
            "EQoJYWNjb3VudElEGAEgASgDEg0KBWlzTmV3GAIgASgIEhAKCG5pY2tOYW1l",
            "GAMgASgJEhMKC3BsYXllckxldmVsGAQgASgFEhQKDGhpZ2hlc3RTY29yZRgF",
            "IAEoAyI3ChBLaWxsVXNlclJlc3BvbnNlEiMKDGtpbGxVc2VyVHlwZRgBIAEo",
            "DjINLktpbGxVc2VyVHlwZSJGChNNZXNzYWdlU2VlZFJlc3BvbnNlEg4KBnVz",
            "ZXJJRBgBIAEoAxIRCglzZXNzaW9uSUQYAiABKAMSDAoEc2VlZBgDIAEoDSIo",
            "ChNMb2dpbkZpbmlzaFJlc3BvbnNlEhEKCWFjY291bnRJRBgBIAEoAyIfCg1M",
            "b2dvdXRSZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAyIgCg5Mb2dvdXRSZXNwb25z",
            "ZRIOCgZ1c2VySUQYASABKAMiLwoPS2lja091dFJlc3BvbnNlEg4KBnVzZXJJ",
            "RBgBIAEoAxIMCgR0eXBlGAIgASgFIjIKEEd1aWRlU2F2ZVJlcXVlc3QSEQoJ",
            "YWNjb3VudElEGAEgASgDEgsKA3RhZxgCIAEoBSI5ChFHdWlkZUluZm9SZXNw",
            "b25zZRIRCglhY2NvdW50SUQYASABKAMSEQoJR3VpZGVUYWdzGAIgAygFIjUK",
            "EUNoYW5nZU5hbWVSZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAxIQCgh1c2VyTmFt",
            "ZRgCIAEoCSJNChJDaGFuZ2VOYW1lUmVzcG9uc2USDgoGdXNlcklEGAEgASgD",
            "EhAKCHVzZXJOYW1lGAIgASgJEhUKDW5pY2tOYW1lQ1RpbWUYAyABKAUqMQoJ",
            "TG9naW5UeXBlEgsKB0FDQ09VTlQQABIOCgpGQVNUX0xPR0lOEAESBwoDU0RL",
            "EAIqPwoMS2lsbFVzZXJUeXBlEhAKDFNBTUVfQUNDT1VOVBAAEhAKDENMT1NF",
            "X1NFUlZFUhABEgsKB0tJQ0tPVVQQAkIjChhjb20udG9wZ2FtZS5tZXNzYWdl",
            "LmhhbGyqAgZQcm90bzNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto3.CommonMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.LoginType), typeof(global::Proto3.KillUserType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LoginVerifyRequest), global::Proto3.LoginVerifyRequest.Parser, new[]{ "Account", "Password", "NickName", "RegistrationToken", "Version", "AutoCreate", "LoginType", "DeviceGUID", "OsInfo", "DeviceType", "DeviceModel", "LoginChannel", "SubChannel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LoginVerifyResponse), global::Proto3.LoginVerifyResponse.Parser, new[]{ "Account", "Password", "UserId", "RegistrationToken", "NickName", "LoginChannel", "LoginType", "Gate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LoginRequest), global::Proto3.LoginRequest.Parser, new[]{ "AccountID", "NickName", "IsReconnection", "IsLinkChange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LoginResponse), global::Proto3.LoginResponse.Parser, new[]{ "AccountID", "IsCreate", "OnlineTime", "NickName", "IsReconnection", "UnderageRemainingTime", "NickNameCTime", "IsFirstBuy", "SpecialNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.UserBaseInfoResponse), global::Proto3.UserBaseInfoResponse.Parser, new[]{ "AccountID", "IsNew", "NickName", "PlayerLevel", "HighestScore" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.KillUserResponse), global::Proto3.KillUserResponse.Parser, new[]{ "KillUserType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.MessageSeedResponse), global::Proto3.MessageSeedResponse.Parser, new[]{ "UserID", "SessionID", "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LoginFinishResponse), global::Proto3.LoginFinishResponse.Parser, new[]{ "AccountID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LogoutRequest), global::Proto3.LogoutRequest.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.LogoutResponse), global::Proto3.LogoutResponse.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.KickOutResponse), global::Proto3.KickOutResponse.Parser, new[]{ "UserID", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.GuideSaveRequest), global::Proto3.GuideSaveRequest.Parser, new[]{ "AccountID", "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.GuideInfoResponse), global::Proto3.GuideInfoResponse.Parser, new[]{ "AccountID", "GuideTags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ChangeNameRequest), global::Proto3.ChangeNameRequest.Parser, new[]{ "UserID", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ChangeNameResponse), global::Proto3.ChangeNameResponse.Parser, new[]{ "UserID", "UserName", "NickNameCTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///登录类型
  /// </summary>
  public enum LoginType {
    /// <summary>
    ///账号登录
    /// </summary>
    [pbr::OriginalName("ACCOUNT")] Account = 0,
    /// <summary>
    ///快速登录
    /// </summary>
    [pbr::OriginalName("FAST_LOGIN")] FastLogin = 1,
    /// <summary>
    ///SDK 登录
    /// </summary>
    [pbr::OriginalName("SDK")] Sdk = 2,
  }

  public enum KillUserType {
    /// <summary>
    /// 顶号
    /// </summary>
    [pbr::OriginalName("SAME_ACCOUNT")] SameAccount = 0,
    /// <summary>
    /// 服务器关闭
    /// </summary>
    [pbr::OriginalName("CLOSE_SERVER")] CloseServer = 1,
    /// <summary>
    /// 服务器踢出
    /// </summary>
    [pbr::OriginalName("KICKOUT")] Kickout = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///登录验证
  /// </summary>
  public sealed partial class LoginVerifyRequest : pb::IMessage<LoginVerifyRequest> {
    private static readonly pb::MessageParser<LoginVerifyRequest> _parser = new pb::MessageParser<LoginVerifyRequest>(() => new LoginVerifyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginVerifyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginVerifyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginVerifyRequest(LoginVerifyRequest other) : this() {
      account_ = other.account_;
      password_ = other.password_;
      nickName_ = other.nickName_;
      registrationToken_ = other.registrationToken_;
      version_ = other.version_;
      autoCreate_ = other.autoCreate_;
      loginType_ = other.loginType_;
      deviceGUID_ = other.deviceGUID_;
      osInfo_ = other.osInfo_;
      deviceType_ = other.deviceType_;
      deviceModel_ = other.deviceModel_;
      loginChannel_ = other.loginChannel_;
      subChannel_ = other.subChannel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginVerifyRequest Clone() {
      return new LoginVerifyRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "registrationToken" field.</summary>
    public const int RegistrationTokenFieldNumber = 4;
    private string registrationToken_ = "";
    /// <summary>
    /// 设备的注册令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistrationToken {
      get { return registrationToken_; }
      set {
        registrationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "autoCreate" field.</summary>
    public const int AutoCreateFieldNumber = 6;
    private bool autoCreate_;
    /// <summary>
    ///自动创建
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoCreate {
      get { return autoCreate_; }
      set {
        autoCreate_ = value;
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 7;
    private global::Proto3.LoginType loginType_ = 0;
    /// <summary>
    ///登录类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "deviceGUID" field.</summary>
    public const int DeviceGUIDFieldNumber = 8;
    private string deviceGUID_ = "";
    /// <summary>
    /// 设备唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceGUID {
      get { return deviceGUID_; }
      set {
        deviceGUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "osInfo" field.</summary>
    public const int OsInfoFieldNumber = 9;
    private string osInfo_ = "";
    /// <summary>
    /// 操作系统信息，ios 11.0.1等]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsInfo {
      get { return osInfo_; }
      set {
        osInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 10;
    private string deviceType_ = "";
    /// <summary>
    /// 设备类型ipad， iPhone、HUAWEI、小米、OPPO、VIVO等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceModel" field.</summary>
    public const int DeviceModelFieldNumber = 11;
    private string deviceModel_ = "";
    /// <summary>
    /// 设备型号iPhone6s，ipad mini2，oppoR9，vivo x7等等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceModel {
      get { return deviceModel_; }
      set {
        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginChannel" field.</summary>
    public const int LoginChannelFieldNumber = 12;
    private string loginChannel_ = "";
    /// <summary>
    ///登录渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginChannel {
      get { return loginChannel_; }
      set {
        loginChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subChannel" field.</summary>
    public const int SubChannelFieldNumber = 13;
    private string subChannel_ = "";
    /// <summary>
    ///子渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubChannel {
      get { return subChannel_; }
      set {
        subChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginVerifyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginVerifyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (NickName != other.NickName) return false;
      if (RegistrationToken != other.RegistrationToken) return false;
      if (Version != other.Version) return false;
      if (AutoCreate != other.AutoCreate) return false;
      if (LoginType != other.LoginType) return false;
      if (DeviceGUID != other.DeviceGUID) return false;
      if (OsInfo != other.OsInfo) return false;
      if (DeviceType != other.DeviceType) return false;
      if (DeviceModel != other.DeviceModel) return false;
      if (LoginChannel != other.LoginChannel) return false;
      if (SubChannel != other.SubChannel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (RegistrationToken.Length != 0) hash ^= RegistrationToken.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (AutoCreate != false) hash ^= AutoCreate.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (DeviceGUID.Length != 0) hash ^= DeviceGUID.GetHashCode();
      if (OsInfo.Length != 0) hash ^= OsInfo.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
      if (LoginChannel.Length != 0) hash ^= LoginChannel.GetHashCode();
      if (SubChannel.Length != 0) hash ^= SubChannel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (RegistrationToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RegistrationToken);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
      if (AutoCreate != false) {
        output.WriteRawTag(48);
        output.WriteBool(AutoCreate);
      }
      if (LoginType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) LoginType);
      }
      if (DeviceGUID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceGUID);
      }
      if (OsInfo.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(OsInfo);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DeviceType);
      }
      if (DeviceModel.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DeviceModel);
      }
      if (LoginChannel.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LoginChannel);
      }
      if (SubChannel.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(SubChannel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (RegistrationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationToken);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (AutoCreate != false) {
        size += 1 + 1;
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (DeviceGUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceGUID);
      }
      if (OsInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsInfo);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      if (DeviceModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
      }
      if (LoginChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginChannel);
      }
      if (SubChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubChannel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginVerifyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.RegistrationToken.Length != 0) {
        RegistrationToken = other.RegistrationToken;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.AutoCreate != false) {
        AutoCreate = other.AutoCreate;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.DeviceGUID.Length != 0) {
        DeviceGUID = other.DeviceGUID;
      }
      if (other.OsInfo.Length != 0) {
        OsInfo = other.OsInfo;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.DeviceModel.Length != 0) {
        DeviceModel = other.DeviceModel;
      }
      if (other.LoginChannel.Length != 0) {
        LoginChannel = other.LoginChannel;
      }
      if (other.SubChannel.Length != 0) {
        SubChannel = other.SubChannel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 34: {
            RegistrationToken = input.ReadString();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
          case 48: {
            AutoCreate = input.ReadBool();
            break;
          }
          case 56: {
            loginType_ = (global::Proto3.LoginType) input.ReadEnum();
            break;
          }
          case 66: {
            DeviceGUID = input.ReadString();
            break;
          }
          case 74: {
            OsInfo = input.ReadString();
            break;
          }
          case 82: {
            DeviceType = input.ReadString();
            break;
          }
          case 90: {
            DeviceModel = input.ReadString();
            break;
          }
          case 98: {
            LoginChannel = input.ReadString();
            break;
          }
          case 106: {
            SubChannel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginVerifyResponse : pb::IMessage<LoginVerifyResponse> {
    private static readonly pb::MessageParser<LoginVerifyResponse> _parser = new pb::MessageParser<LoginVerifyResponse>(() => new LoginVerifyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginVerifyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginVerifyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginVerifyResponse(LoginVerifyResponse other) : this() {
      account_ = other.account_;
      password_ = other.password_;
      userId_ = other.userId_;
      registrationToken_ = other.registrationToken_;
      nickName_ = other.nickName_;
      loginChannel_ = other.loginChannel_;
      loginType_ = other.loginType_;
      gate_ = other.gate_ != null ? other.gate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginVerifyResponse Clone() {
      return new LoginVerifyResponse(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "registrationToken" field.</summary>
    public const int RegistrationTokenFieldNumber = 4;
    private string registrationToken_ = "";
    /// <summary>
    /// 设备的注册令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistrationToken {
      get { return registrationToken_; }
      set {
        registrationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 5;
    private string nickName_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginChannel" field.</summary>
    public const int LoginChannelFieldNumber = 6;
    private string loginChannel_ = "";
    /// <summary>
    ///登录渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginChannel {
      get { return loginChannel_; }
      set {
        loginChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginType" field.</summary>
    public const int LoginTypeFieldNumber = 7;
    private global::Proto3.LoginType loginType_ = 0;
    /// <summary>
    ///登录类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.LoginType LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "gate" field.</summary>
    public const int GateFieldNumber = 8;
    private global::Proto3.ClientServerInfo gate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.ClientServerInfo Gate {
      get { return gate_; }
      set {
        gate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginVerifyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginVerifyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (UserId != other.UserId) return false;
      if (RegistrationToken != other.RegistrationToken) return false;
      if (NickName != other.NickName) return false;
      if (LoginChannel != other.LoginChannel) return false;
      if (LoginType != other.LoginType) return false;
      if (!object.Equals(Gate, other.Gate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (RegistrationToken.Length != 0) hash ^= RegistrationToken.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (LoginChannel.Length != 0) hash ^= LoginChannel.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (gate_ != null) hash ^= Gate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (UserId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserId);
      }
      if (RegistrationToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RegistrationToken);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (LoginChannel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LoginChannel);
      }
      if (LoginType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) LoginType);
      }
      if (gate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Gate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (RegistrationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistrationToken);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (LoginChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginChannel);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoginType);
      }
      if (gate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginVerifyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.RegistrationToken.Length != 0) {
        RegistrationToken = other.RegistrationToken;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.LoginChannel.Length != 0) {
        LoginChannel = other.LoginChannel;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.gate_ != null) {
        if (gate_ == null) {
          gate_ = new global::Proto3.ClientServerInfo();
        }
        Gate.MergeFrom(other.Gate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            RegistrationToken = input.ReadString();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
          case 50: {
            LoginChannel = input.ReadString();
            break;
          }
          case 56: {
            loginType_ = (global::Proto3.LoginType) input.ReadEnum();
            break;
          }
          case 66: {
            if (gate_ == null) {
              gate_ = new global::Proto3.ClientServerInfo();
            }
            input.ReadMessage(gate_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录（进入游戏）
  /// </summary>
  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      accountID_ = other.accountID_;
      nickName_ = other.nickName_;
      isReconnection_ = other.isReconnection_;
      isLinkChange_ = other.isLinkChange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 1;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isReconnection" field.</summary>
    public const int IsReconnectionFieldNumber = 3;
    private bool isReconnection_;
    /// <summary>
    /// 是否重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReconnection {
      get { return isReconnection_; }
      set {
        isReconnection_ = value;
      }
    }

    /// <summary>Field number for the "isLinkChange" field.</summary>
    public const int IsLinkChangeFieldNumber = 4;
    private bool isLinkChange_;
    /// <summary>
    ///是否更换服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLinkChange {
      get { return isLinkChange_; }
      set {
        isLinkChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountID != other.AccountID) return false;
      if (NickName != other.NickName) return false;
      if (IsReconnection != other.IsReconnection) return false;
      if (IsLinkChange != other.IsLinkChange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (IsReconnection != false) hash ^= IsReconnection.GetHashCode();
      if (IsLinkChange != false) hash ^= IsLinkChange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountID);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (IsReconnection != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReconnection);
      }
      if (IsLinkChange != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLinkChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (IsReconnection != false) {
        size += 1 + 1;
      }
      if (IsLinkChange != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.IsReconnection != false) {
        IsReconnection = other.IsReconnection;
      }
      if (other.IsLinkChange != false) {
        IsLinkChange = other.IsLinkChange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountID = input.ReadInt64();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            IsReconnection = input.ReadBool();
            break;
          }
          case 32: {
            IsLinkChange = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
    private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse(LoginResponse other) : this() {
      accountID_ = other.accountID_;
      isCreate_ = other.isCreate_;
      onlineTime_ = other.onlineTime_;
      nickName_ = other.nickName_;
      isReconnection_ = other.isReconnection_;
      underageRemainingTime_ = other.underageRemainingTime_;
      nickNameCTime_ = other.nickNameCTime_;
      isFirstBuy_ = other.isFirstBuy_;
      specialNum_ = other.specialNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponse Clone() {
      return new LoginResponse(this);
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 1;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "isCreate" field.</summary>
    public const int IsCreateFieldNumber = 2;
    private bool isCreate_;
    /// <summary>
    ///是否是创建新角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCreate {
      get { return isCreate_; }
      set {
        isCreate_ = value;
      }
    }

    /// <summary>Field number for the "onlineTime" field.</summary>
    public const int OnlineTimeFieldNumber = 3;
    private int onlineTime_;
    /// <summary>
    /// 在线时长（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OnlineTime {
      get { return onlineTime_; }
      set {
        onlineTime_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 4;
    private string nickName_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isReconnection" field.</summary>
    public const int IsReconnectionFieldNumber = 5;
    private bool isReconnection_;
    /// <summary>
    /// 是否重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReconnection {
      get { return isReconnection_; }
      set {
        isReconnection_ = value;
      }
    }

    /// <summary>Field number for the "underageRemainingTime" field.</summary>
    public const int UnderageRemainingTimeFieldNumber = 6;
    private int underageRemainingTime_;
    /// <summary>
    /// 未成年剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnderageRemainingTime {
      get { return underageRemainingTime_; }
      set {
        underageRemainingTime_ = value;
      }
    }

    /// <summary>Field number for the "nickNameCTime" field.</summary>
    public const int NickNameCTimeFieldNumber = 7;
    private int nickNameCTime_;
    /// <summary>
    ///用户名更改次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NickNameCTime {
      get { return nickNameCTime_; }
      set {
        nickNameCTime_ = value;
      }
    }

    /// <summary>Field number for the "isFirstBuy" field.</summary>
    public const int IsFirstBuyFieldNumber = 8;
    private bool isFirstBuy_;
    /// <summary>
    ///是否拥有首充
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFirstBuy {
      get { return isFirstBuy_; }
      set {
        isFirstBuy_ = value;
      }
    }

    /// <summary>Field number for the "specialNum" field.</summary>
    public const int SpecialNumFieldNumber = 9;
    private int specialNum_;
    /// <summary>
    ///抽卡累计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialNum {
      get { return specialNum_; }
      set {
        specialNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountID != other.AccountID) return false;
      if (IsCreate != other.IsCreate) return false;
      if (OnlineTime != other.OnlineTime) return false;
      if (NickName != other.NickName) return false;
      if (IsReconnection != other.IsReconnection) return false;
      if (UnderageRemainingTime != other.UnderageRemainingTime) return false;
      if (NickNameCTime != other.NickNameCTime) return false;
      if (IsFirstBuy != other.IsFirstBuy) return false;
      if (SpecialNum != other.SpecialNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      if (IsCreate != false) hash ^= IsCreate.GetHashCode();
      if (OnlineTime != 0) hash ^= OnlineTime.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (IsReconnection != false) hash ^= IsReconnection.GetHashCode();
      if (UnderageRemainingTime != 0) hash ^= UnderageRemainingTime.GetHashCode();
      if (NickNameCTime != 0) hash ^= NickNameCTime.GetHashCode();
      if (IsFirstBuy != false) hash ^= IsFirstBuy.GetHashCode();
      if (SpecialNum != 0) hash ^= SpecialNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountID);
      }
      if (IsCreate != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCreate);
      }
      if (OnlineTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OnlineTime);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NickName);
      }
      if (IsReconnection != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsReconnection);
      }
      if (UnderageRemainingTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnderageRemainingTime);
      }
      if (NickNameCTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NickNameCTime);
      }
      if (IsFirstBuy != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsFirstBuy);
      }
      if (SpecialNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SpecialNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      if (IsCreate != false) {
        size += 1 + 1;
      }
      if (OnlineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlineTime);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (IsReconnection != false) {
        size += 1 + 1;
      }
      if (UnderageRemainingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnderageRemainingTime);
      }
      if (NickNameCTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NickNameCTime);
      }
      if (IsFirstBuy != false) {
        size += 1 + 1;
      }
      if (SpecialNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      if (other.IsCreate != false) {
        IsCreate = other.IsCreate;
      }
      if (other.OnlineTime != 0) {
        OnlineTime = other.OnlineTime;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.IsReconnection != false) {
        IsReconnection = other.IsReconnection;
      }
      if (other.UnderageRemainingTime != 0) {
        UnderageRemainingTime = other.UnderageRemainingTime;
      }
      if (other.NickNameCTime != 0) {
        NickNameCTime = other.NickNameCTime;
      }
      if (other.IsFirstBuy != false) {
        IsFirstBuy = other.IsFirstBuy;
      }
      if (other.SpecialNum != 0) {
        SpecialNum = other.SpecialNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountID = input.ReadInt64();
            break;
          }
          case 16: {
            IsCreate = input.ReadBool();
            break;
          }
          case 24: {
            OnlineTime = input.ReadInt32();
            break;
          }
          case 34: {
            NickName = input.ReadString();
            break;
          }
          case 40: {
            IsReconnection = input.ReadBool();
            break;
          }
          case 48: {
            UnderageRemainingTime = input.ReadInt32();
            break;
          }
          case 56: {
            NickNameCTime = input.ReadInt32();
            break;
          }
          case 64: {
            IsFirstBuy = input.ReadBool();
            break;
          }
          case 72: {
            SpecialNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserBaseInfoResponse : pb::IMessage<UserBaseInfoResponse> {
    private static readonly pb::MessageParser<UserBaseInfoResponse> _parser = new pb::MessageParser<UserBaseInfoResponse>(() => new UserBaseInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBaseInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseInfoResponse(UserBaseInfoResponse other) : this() {
      accountID_ = other.accountID_;
      isNew_ = other.isNew_;
      nickName_ = other.nickName_;
      playerLevel_ = other.playerLevel_;
      highestScore_ = other.highestScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBaseInfoResponse Clone() {
      return new UserBaseInfoResponse(this);
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 1;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "isNew" field.</summary>
    public const int IsNewFieldNumber = 2;
    private bool isNew_;
    /// <summary>
    ///是否新建
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerLevel" field.</summary>
    public const int PlayerLevelFieldNumber = 4;
    private int playerLevel_;
    /// <summary>
    ///用户等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevel {
      get { return playerLevel_; }
      set {
        playerLevel_ = value;
      }
    }

    /// <summary>Field number for the "highestScore" field.</summary>
    public const int HighestScoreFieldNumber = 5;
    private long highestScore_;
    /// <summary>
    ///最高分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HighestScore {
      get { return highestScore_; }
      set {
        highestScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBaseInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBaseInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountID != other.AccountID) return false;
      if (IsNew != other.IsNew) return false;
      if (NickName != other.NickName) return false;
      if (PlayerLevel != other.PlayerLevel) return false;
      if (HighestScore != other.HighestScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      if (IsNew != false) hash ^= IsNew.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (PlayerLevel != 0) hash ^= PlayerLevel.GetHashCode();
      if (HighestScore != 0L) hash ^= HighestScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountID);
      }
      if (IsNew != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsNew);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (PlayerLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerLevel);
      }
      if (HighestScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(HighestScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      if (IsNew != false) {
        size += 1 + 1;
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (PlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevel);
      }
      if (HighestScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HighestScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBaseInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      if (other.IsNew != false) {
        IsNew = other.IsNew;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.PlayerLevel != 0) {
        PlayerLevel = other.PlayerLevel;
      }
      if (other.HighestScore != 0L) {
        HighestScore = other.HighestScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountID = input.ReadInt64();
            break;
          }
          case 16: {
            IsNew = input.ReadBool();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 32: {
            PlayerLevel = input.ReadInt32();
            break;
          }
          case 40: {
            HighestScore = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KillUserResponse : pb::IMessage<KillUserResponse> {
    private static readonly pb::MessageParser<KillUserResponse> _parser = new pb::MessageParser<KillUserResponse>(() => new KillUserResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KillUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillUserResponse(KillUserResponse other) : this() {
      killUserType_ = other.killUserType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillUserResponse Clone() {
      return new KillUserResponse(this);
    }

    /// <summary>Field number for the "killUserType" field.</summary>
    public const int KillUserTypeFieldNumber = 1;
    private global::Proto3.KillUserType killUserType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.KillUserType KillUserType {
      get { return killUserType_; }
      set {
        killUserType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KillUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KillUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KillUserType != other.KillUserType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KillUserType != 0) hash ^= KillUserType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KillUserType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) KillUserType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KillUserType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KillUserType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KillUserResponse other) {
      if (other == null) {
        return;
      }
      if (other.KillUserType != 0) {
        KillUserType = other.KillUserType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            killUserType_ = (global::Proto3.KillUserType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageSeedResponse : pb::IMessage<MessageSeedResponse> {
    private static readonly pb::MessageParser<MessageSeedResponse> _parser = new pb::MessageParser<MessageSeedResponse>(() => new MessageSeedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageSeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageSeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageSeedResponse(MessageSeedResponse other) : this() {
      userID_ = other.userID_;
      sessionID_ = other.sessionID_;
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageSeedResponse Clone() {
      return new MessageSeedResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "sessionID" field.</summary>
    public const int SessionIDFieldNumber = 2;
    private long sessionID_;
    /// <summary>
    ///会话ID（服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionID {
      get { return sessionID_; }
      set {
        sessionID_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 3;
    private uint seed_;
    /// <summary>
    /// 消息种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageSeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageSeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (SessionID != other.SessionID) return false;
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (SessionID != 0L) hash ^= SessionID.GetHashCode();
      if (Seed != 0) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (SessionID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SessionID);
      }
      if (Seed != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (SessionID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionID);
      }
      if (Seed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageSeedResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.SessionID != 0L) {
        SessionID = other.SessionID;
      }
      if (other.Seed != 0) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            SessionID = input.ReadInt64();
            break;
          }
          case 24: {
            Seed = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginFinishResponse : pb::IMessage<LoginFinishResponse> {
    private static readonly pb::MessageParser<LoginFinishResponse> _parser = new pb::MessageParser<LoginFinishResponse>(() => new LoginFinishResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginFinishResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginFinishResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginFinishResponse(LoginFinishResponse other) : this() {
      accountID_ = other.accountID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginFinishResponse Clone() {
      return new LoginFinishResponse(this);
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 1;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginFinishResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginFinishResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountID != other.AccountID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginFinishResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogoutRequest : pb::IMessage<LogoutRequest> {
    private static readonly pb::MessageParser<LogoutRequest> _parser = new pb::MessageParser<LogoutRequest>(() => new LogoutRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRequest(LogoutRequest other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRequest Clone() {
      return new LogoutRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogoutResponse : pb::IMessage<LogoutResponse> {
    private static readonly pb::MessageParser<LogoutResponse> _parser = new pb::MessageParser<LogoutResponse>(() => new LogoutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResponse(LogoutResponse other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutResponse Clone() {
      return new LogoutResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickOutResponse : pb::IMessage<KickOutResponse> {
    private static readonly pb::MessageParser<KickOutResponse> _parser = new pb::MessageParser<KickOutResponse>(() => new KickOutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickOutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOutResponse(KickOutResponse other) : this() {
      userID_ = other.userID_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickOutResponse Clone() {
      return new KickOutResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///0-顶号 1-服务器管理后台操作退出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickOutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickOutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickOutResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///保存引导数据
  /// </summary>
  public sealed partial class GuideSaveRequest : pb::IMessage<GuideSaveRequest> {
    private static readonly pb::MessageParser<GuideSaveRequest> _parser = new pb::MessageParser<GuideSaveRequest>(() => new GuideSaveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideSaveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideSaveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideSaveRequest(GuideSaveRequest other) : this() {
      accountID_ = other.accountID_;
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideSaveRequest Clone() {
      return new GuideSaveRequest(this);
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 1;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 2;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideSaveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideSaveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountID != other.AccountID) return false;
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountID);
      }
      if (Tag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideSaveRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountID = input.ReadInt64();
            break;
          }
          case 16: {
            Tag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuideInfoResponse : pb::IMessage<GuideInfoResponse> {
    private static readonly pb::MessageParser<GuideInfoResponse> _parser = new pb::MessageParser<GuideInfoResponse>(() => new GuideInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuideInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfoResponse(GuideInfoResponse other) : this() {
      accountID_ = other.accountID_;
      guideTags_ = other.guideTags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuideInfoResponse Clone() {
      return new GuideInfoResponse(this);
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 1;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "GuideTags" field.</summary>
    public const int GuideTagsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_guideTags_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> guideTags_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///引导数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GuideTags {
      get { return guideTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuideInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuideInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountID != other.AccountID) return false;
      if(!guideTags_.Equals(other.guideTags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      hash ^= guideTags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AccountID);
      }
      guideTags_.WriteTo(output, _repeated_guideTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      size += guideTags_.CalculateSize(_repeated_guideTags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuideInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      guideTags_.Add(other.guideTags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountID = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            guideTags_.AddEntriesFrom(input, _repeated_guideTags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeNameRequest : pb::IMessage<ChangeNameRequest> {
    private static readonly pb::MessageParser<ChangeNameRequest> _parser = new pb::MessageParser<ChangeNameRequest>(() => new ChangeNameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeNameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameRequest(ChangeNameRequest other) : this() {
      userID_ = other.userID_;
      userName_ = other.userName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameRequest Clone() {
      return new ChangeNameRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeNameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeNameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (UserName != other.UserName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeNameRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeNameResponse : pb::IMessage<ChangeNameResponse> {
    private static readonly pb::MessageParser<ChangeNameResponse> _parser = new pb::MessageParser<ChangeNameResponse>(() => new ChangeNameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeNameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.HallLoginMessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameResponse(ChangeNameResponse other) : this() {
      userID_ = other.userID_;
      userName_ = other.userName_;
      nickNameCTime_ = other.nickNameCTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameResponse Clone() {
      return new ChangeNameResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickNameCTime" field.</summary>
    public const int NickNameCTimeFieldNumber = 3;
    private int nickNameCTime_;
    /// <summary>
    ///用户名更改次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NickNameCTime {
      get { return nickNameCTime_; }
      set {
        nickNameCTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeNameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeNameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (UserName != other.UserName) return false;
      if (NickNameCTime != other.NickNameCTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (NickNameCTime != 0) hash ^= NickNameCTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (NickNameCTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NickNameCTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (NickNameCTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NickNameCTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeNameResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.NickNameCTime != 0) {
        NickNameCTime = other.NickNameCTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 24: {
            NickNameCTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
