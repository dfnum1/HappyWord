// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/rank/RankMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from proto/rank/RankMessage.proto</summary>
  public static partial class RankMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/rank/RankMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RankMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxwcm90by9yYW5rL1JhbmtNZXNzYWdlLnByb3RvGiBwcm90by9jb21tb24v",
            "Q29tbW9uTWVzc2FnZS5wcm90byJPCghSYW5rSW5mbxIKCgJpZBgBIAEoAxIM",
            "CgRyYW5rGAIgASgFEg0KBXNjb3JlGAMgASgDEgwKBGhlYWQYBCABKAUSDAoE",
            "bmFtZRgFIAEoCSJPCg9SYW5rSW5mb1JlcXVlc3QSDgoGdXNlcklEGAEgASgD",
            "EhAKCHJhbmtUeXBlGAIgASgFEg0KBXN0YXJ0GAMgASgFEgsKA2VuZBgEIAEo",
            "BSKWAQoQUmFua0luZm9SZXNwb25zZRIOCgZ1c2VySUQYASABKAMSEAoIcmFu",
            "a1R5cGUYAiABKAUSDQoFc3RhcnQYAyABKAUSCwoDZW5kGAQgASgFEhMKC3Nl",
            "YXNvbkNvdW50GAUgASgFEhIKCnNlYXNvblRpbWUYBiABKAMSGwoIcmFua0lu",
            "Zm8YByADKAsyCS5SYW5rSW5mbyJeCg9SYW5rVXNlclJlcXVlc3QSDgoGdXNl",
            "cklEGAEgASgDEhAKCHJhbmtUeXBlGAIgASgFEhQKDGJlZm9yZU9mZnNldBgD",
            "IAEoBRITCgthZnRlck9mZnNldBgEIAEoBSJ8ChBSYW5rVXNlclJlc3BvbnNl",
            "Eg4KBnVzZXJJRBgBIAEoAxIQCghyYW5rVHlwZRgCIAEoBRIUCgxiZWZvcmVP",
            "ZmZzZXQYAyABKAUSEwoLYWZ0ZXJPZmZzZXQYBCABKAUSGwoIcmFua0luZm8Y",
            "BSADKAsyCS5SYW5rSW5mbyJuChFEaXJ0eVJhbmtSZXNwb25zZRIOCgZ1c2Vy",
            "SUQYASABKAMSEQoJc2NvcmVSYW5rGAIgASgFEg0KBXNjb3JlGAMgASgDEhMK",
            "C3NlYXNvbkNvdW50GAQgASgFEhIKCnNlYXNvblRpbWUYBSABKAMiIwoRUmFu",
            "a1Jld2FyZFJlcXVlc3QSDgoGdXNlcklEGAEgASgDIkAKElJhbmtSZXdhcmRS",
            "ZXNwb25zZRIOCgZ1c2VySUQYASABKAMSGgoHcmV3YXJkcxgCIAMoCzIJLktl",
            "eVZhbHVlQiMKGGNvbS50b3BnYW1lLm1lc3NhZ2UuaGFsbKoCBlByb3RvM2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto3.CommonMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RankInfo), global::Proto3.RankInfo.Parser, new[]{ "Id", "Rank", "Score", "Head", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RankInfoRequest), global::Proto3.RankInfoRequest.Parser, new[]{ "UserID", "RankType", "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RankInfoResponse), global::Proto3.RankInfoResponse.Parser, new[]{ "UserID", "RankType", "Start", "End", "SeasonCount", "SeasonTime", "RankInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RankUserRequest), global::Proto3.RankUserRequest.Parser, new[]{ "UserID", "RankType", "BeforeOffset", "AfterOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RankUserResponse), global::Proto3.RankUserResponse.Parser, new[]{ "UserID", "RankType", "BeforeOffset", "AfterOffset", "RankInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.DirtyRankResponse), global::Proto3.DirtyRankResponse.Parser, new[]{ "UserID", "ScoreRank", "Score", "SeasonCount", "SeasonTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RankRewardRequest), global::Proto3.RankRewardRequest.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RankRewardResponse), global::Proto3.RankRewardResponse.Parser, new[]{ "UserID", "Rewards" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RankInfo : pb::IMessage<RankInfo> {
    private static readonly pb::MessageParser<RankInfo> _parser = new pb::MessageParser<RankInfo>(() => new RankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfo(RankInfo other) : this() {
      id_ = other.id_;
      rank_ = other.rank_;
      score_ = other.score_;
      head_ = other.head_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfo Clone() {
      return new RankInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    /// <summary>
    /// 排名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private long score_;
    /// <summary>
    /// 分数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 4;
    private int head_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Head {
      get { return head_; }
      set {
        head_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Rank != other.Rank) return false;
      if (Score != other.Score) return false;
      if (Head != other.Head) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (Head != 0) hash ^= Head.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      if (Head != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Head);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (Head != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Head);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.Head != 0) {
        Head = other.Head;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 32: {
            Head = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 排行信息
  /// </summary>
  public sealed partial class RankInfoRequest : pb::IMessage<RankInfoRequest> {
    private static readonly pb::MessageParser<RankInfoRequest> _parser = new pb::MessageParser<RankInfoRequest>(() => new RankInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoRequest(RankInfoRequest other) : this() {
      userID_ = other.userID_;
      rankType_ = other.rankType_;
      start_ = other.start_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoRequest Clone() {
      return new RankInfoRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "rankType" field.</summary>
    public const int RankTypeFieldNumber = 2;
    private int rankType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankType {
      get { return rankType_; }
      set {
        rankType_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 3;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 4;
    private int end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RankType != other.RankType) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RankType != 0) hash ^= RankType.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (End != 0) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RankType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankType);
      }
      if (Start != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RankType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankType);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RankType != 0) {
        RankType = other.RankType;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.End != 0) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RankType = input.ReadInt32();
            break;
          }
          case 24: {
            Start = input.ReadInt32();
            break;
          }
          case 32: {
            End = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankInfoResponse : pb::IMessage<RankInfoResponse> {
    private static readonly pb::MessageParser<RankInfoResponse> _parser = new pb::MessageParser<RankInfoResponse>(() => new RankInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoResponse(RankInfoResponse other) : this() {
      userID_ = other.userID_;
      rankType_ = other.rankType_;
      start_ = other.start_;
      end_ = other.end_;
      seasonCount_ = other.seasonCount_;
      seasonTime_ = other.seasonTime_;
      rankInfo_ = other.rankInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfoResponse Clone() {
      return new RankInfoResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "rankType" field.</summary>
    public const int RankTypeFieldNumber = 2;
    private int rankType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankType {
      get { return rankType_; }
      set {
        rankType_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 3;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 4;
    private int end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "seasonCount" field.</summary>
    public const int SeasonCountFieldNumber = 5;
    private int seasonCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonCount {
      get { return seasonCount_; }
      set {
        seasonCount_ = value;
      }
    }

    /// <summary>Field number for the "seasonTime" field.</summary>
    public const int SeasonTimeFieldNumber = 6;
    private long seasonTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SeasonTime {
      get { return seasonTime_; }
      set {
        seasonTime_ = value;
      }
    }

    /// <summary>Field number for the "rankInfo" field.</summary>
    public const int RankInfoFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Proto3.RankInfo> _repeated_rankInfo_codec
        = pb::FieldCodec.ForMessage(58, global::Proto3.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.RankInfo> rankInfo_ = new pbc::RepeatedField<global::Proto3.RankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.RankInfo> RankInfo {
      get { return rankInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RankType != other.RankType) return false;
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (SeasonCount != other.SeasonCount) return false;
      if (SeasonTime != other.SeasonTime) return false;
      if(!rankInfo_.Equals(other.rankInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RankType != 0) hash ^= RankType.GetHashCode();
      if (Start != 0) hash ^= Start.GetHashCode();
      if (End != 0) hash ^= End.GetHashCode();
      if (SeasonCount != 0) hash ^= SeasonCount.GetHashCode();
      if (SeasonTime != 0L) hash ^= SeasonTime.GetHashCode();
      hash ^= rankInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RankType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankType);
      }
      if (Start != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(End);
      }
      if (SeasonCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SeasonCount);
      }
      if (SeasonTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SeasonTime);
      }
      rankInfo_.WriteTo(output, _repeated_rankInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RankType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankType);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
      }
      if (SeasonCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonCount);
      }
      if (SeasonTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SeasonTime);
      }
      size += rankInfo_.CalculateSize(_repeated_rankInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RankType != 0) {
        RankType = other.RankType;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.End != 0) {
        End = other.End;
      }
      if (other.SeasonCount != 0) {
        SeasonCount = other.SeasonCount;
      }
      if (other.SeasonTime != 0L) {
        SeasonTime = other.SeasonTime;
      }
      rankInfo_.Add(other.rankInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RankType = input.ReadInt32();
            break;
          }
          case 24: {
            Start = input.ReadInt32();
            break;
          }
          case 32: {
            End = input.ReadInt32();
            break;
          }
          case 40: {
            SeasonCount = input.ReadInt32();
            break;
          }
          case 48: {
            SeasonTime = input.ReadInt64();
            break;
          }
          case 58: {
            rankInfo_.AddEntriesFrom(input, _repeated_rankInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 排行信息
  /// </summary>
  public sealed partial class RankUserRequest : pb::IMessage<RankUserRequest> {
    private static readonly pb::MessageParser<RankUserRequest> _parser = new pb::MessageParser<RankUserRequest>(() => new RankUserRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankUserRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankUserRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankUserRequest(RankUserRequest other) : this() {
      userID_ = other.userID_;
      rankType_ = other.rankType_;
      beforeOffset_ = other.beforeOffset_;
      afterOffset_ = other.afterOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankUserRequest Clone() {
      return new RankUserRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "rankType" field.</summary>
    public const int RankTypeFieldNumber = 2;
    private int rankType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankType {
      get { return rankType_; }
      set {
        rankType_ = value;
      }
    }

    /// <summary>Field number for the "beforeOffset" field.</summary>
    public const int BeforeOffsetFieldNumber = 3;
    private int beforeOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeforeOffset {
      get { return beforeOffset_; }
      set {
        beforeOffset_ = value;
      }
    }

    /// <summary>Field number for the "afterOffset" field.</summary>
    public const int AfterOffsetFieldNumber = 4;
    private int afterOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterOffset {
      get { return afterOffset_; }
      set {
        afterOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankUserRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankUserRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RankType != other.RankType) return false;
      if (BeforeOffset != other.BeforeOffset) return false;
      if (AfterOffset != other.AfterOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RankType != 0) hash ^= RankType.GetHashCode();
      if (BeforeOffset != 0) hash ^= BeforeOffset.GetHashCode();
      if (AfterOffset != 0) hash ^= AfterOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RankType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankType);
      }
      if (BeforeOffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BeforeOffset);
      }
      if (AfterOffset != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AfterOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RankType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankType);
      }
      if (BeforeOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeforeOffset);
      }
      if (AfterOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AfterOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankUserRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RankType != 0) {
        RankType = other.RankType;
      }
      if (other.BeforeOffset != 0) {
        BeforeOffset = other.BeforeOffset;
      }
      if (other.AfterOffset != 0) {
        AfterOffset = other.AfterOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RankType = input.ReadInt32();
            break;
          }
          case 24: {
            BeforeOffset = input.ReadInt32();
            break;
          }
          case 32: {
            AfterOffset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankUserResponse : pb::IMessage<RankUserResponse> {
    private static readonly pb::MessageParser<RankUserResponse> _parser = new pb::MessageParser<RankUserResponse>(() => new RankUserResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankUserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankUserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankUserResponse(RankUserResponse other) : this() {
      userID_ = other.userID_;
      rankType_ = other.rankType_;
      beforeOffset_ = other.beforeOffset_;
      afterOffset_ = other.afterOffset_;
      rankInfo_ = other.rankInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankUserResponse Clone() {
      return new RankUserResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "rankType" field.</summary>
    public const int RankTypeFieldNumber = 2;
    private int rankType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankType {
      get { return rankType_; }
      set {
        rankType_ = value;
      }
    }

    /// <summary>Field number for the "beforeOffset" field.</summary>
    public const int BeforeOffsetFieldNumber = 3;
    private int beforeOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeforeOffset {
      get { return beforeOffset_; }
      set {
        beforeOffset_ = value;
      }
    }

    /// <summary>Field number for the "afterOffset" field.</summary>
    public const int AfterOffsetFieldNumber = 4;
    private int afterOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AfterOffset {
      get { return afterOffset_; }
      set {
        afterOffset_ = value;
      }
    }

    /// <summary>Field number for the "rankInfo" field.</summary>
    public const int RankInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto3.RankInfo> _repeated_rankInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Proto3.RankInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.RankInfo> rankInfo_ = new pbc::RepeatedField<global::Proto3.RankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.RankInfo> RankInfo {
      get { return rankInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankUserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankUserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RankType != other.RankType) return false;
      if (BeforeOffset != other.BeforeOffset) return false;
      if (AfterOffset != other.AfterOffset) return false;
      if(!rankInfo_.Equals(other.rankInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (RankType != 0) hash ^= RankType.GetHashCode();
      if (BeforeOffset != 0) hash ^= BeforeOffset.GetHashCode();
      if (AfterOffset != 0) hash ^= AfterOffset.GetHashCode();
      hash ^= rankInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (RankType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankType);
      }
      if (BeforeOffset != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BeforeOffset);
      }
      if (AfterOffset != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AfterOffset);
      }
      rankInfo_.WriteTo(output, _repeated_rankInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (RankType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankType);
      }
      if (BeforeOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeforeOffset);
      }
      if (AfterOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AfterOffset);
      }
      size += rankInfo_.CalculateSize(_repeated_rankInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankUserResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.RankType != 0) {
        RankType = other.RankType;
      }
      if (other.BeforeOffset != 0) {
        BeforeOffset = other.BeforeOffset;
      }
      if (other.AfterOffset != 0) {
        AfterOffset = other.AfterOffset;
      }
      rankInfo_.Add(other.rankInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            RankType = input.ReadInt32();
            break;
          }
          case 24: {
            BeforeOffset = input.ReadInt32();
            break;
          }
          case 32: {
            AfterOffset = input.ReadInt32();
            break;
          }
          case 42: {
            rankInfo_.AddEntriesFrom(input, _repeated_rankInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DirtyRankResponse : pb::IMessage<DirtyRankResponse> {
    private static readonly pb::MessageParser<DirtyRankResponse> _parser = new pb::MessageParser<DirtyRankResponse>(() => new DirtyRankResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DirtyRankResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DirtyRankResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DirtyRankResponse(DirtyRankResponse other) : this() {
      userID_ = other.userID_;
      scoreRank_ = other.scoreRank_;
      score_ = other.score_;
      seasonCount_ = other.seasonCount_;
      seasonTime_ = other.seasonTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DirtyRankResponse Clone() {
      return new DirtyRankResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "scoreRank" field.</summary>
    public const int ScoreRankFieldNumber = 2;
    private int scoreRank_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScoreRank {
      get { return scoreRank_; }
      set {
        scoreRank_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private long score_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "seasonCount" field.</summary>
    public const int SeasonCountFieldNumber = 4;
    private int seasonCount_;
    /// <summary>
    ///赛季次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonCount {
      get { return seasonCount_; }
      set {
        seasonCount_ = value;
      }
    }

    /// <summary>Field number for the "seasonTime" field.</summary>
    public const int SeasonTimeFieldNumber = 5;
    private long seasonTime_;
    /// <summary>
    ///赛季时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SeasonTime {
      get { return seasonTime_; }
      set {
        seasonTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DirtyRankResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DirtyRankResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (ScoreRank != other.ScoreRank) return false;
      if (Score != other.Score) return false;
      if (SeasonCount != other.SeasonCount) return false;
      if (SeasonTime != other.SeasonTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ScoreRank != 0) hash ^= ScoreRank.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (SeasonCount != 0) hash ^= SeasonCount.GetHashCode();
      if (SeasonTime != 0L) hash ^= SeasonTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (ScoreRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ScoreRank);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      if (SeasonCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeasonCount);
      }
      if (SeasonTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SeasonTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ScoreRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreRank);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (SeasonCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonCount);
      }
      if (SeasonTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SeasonTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DirtyRankResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ScoreRank != 0) {
        ScoreRank = other.ScoreRank;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.SeasonCount != 0) {
        SeasonCount = other.SeasonCount;
      }
      if (other.SeasonTime != 0L) {
        SeasonTime = other.SeasonTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            ScoreRank = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 32: {
            SeasonCount = input.ReadInt32();
            break;
          }
          case 40: {
            SeasonTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 排行奖励
  /// </summary>
  public sealed partial class RankRewardRequest : pb::IMessage<RankRewardRequest> {
    private static readonly pb::MessageParser<RankRewardRequest> _parser = new pb::MessageParser<RankRewardRequest>(() => new RankRewardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankRewardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRewardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRewardRequest(RankRewardRequest other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRewardRequest Clone() {
      return new RankRewardRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankRewardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankRewardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankRewardRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankRewardResponse : pb::IMessage<RankRewardResponse> {
    private static readonly pb::MessageParser<RankRewardResponse> _parser = new pb::MessageParser<RankRewardResponse>(() => new RankRewardResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankRewardResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.RankMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRewardResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRewardResponse(RankRewardResponse other) : this() {
      userID_ = other.userID_;
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRewardResponse Clone() {
      return new RankRewardResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.KeyValue> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Proto3.KeyValue> rewards_ = new pbc::RepeatedField<global::Proto3.KeyValue>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.KeyValue> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankRewardResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankRewardResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankRewardResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
