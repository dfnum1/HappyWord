// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/battle/BattleMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3 {

  /// <summary>Holder for reflection information generated from proto/battle/BattleMessage.proto</summary>
  public static partial class BattleMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/battle/BattleMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBwcm90by9iYXR0bGUvQmF0dGxlTWVzc2FnZS5wcm90bxogcHJvdG8vY29t",
            "bW9uL0NvbW1vbk1lc3NhZ2UucHJvdG8iQgoPS2lsbE1vbnN0ZXJJbmZvEhAK",
            "CG1vc3RlcklEGAEgASgFEg8KB2tpbGxOdW0YAiABKAUSDAoEaHVydBgDIAEo",
            "BSIvCgxQaWNrSXRlbUluZm8SDgoGaXRlbUlEGAEgASgFEg8KB2l0ZW1OdW0Y",
            "AiABKAUiVAoRRW50ZXJMZXZlbFJlcXVlc3QSDgoGdXNlcklEGAEgASgDEgoK",
            "AmlkGAIgAygDEg8KB2xldmVsSUQYAyABKAUSEgoKYmF0dGxlTW9kZRgEIAEo",
            "BSKAAQoSRW50ZXJMZXZlbFJlc3BvbnNlEgwKBGlzT2sYASABKAgSDwoHbGV2",
            "ZWxJRBgCIAEoBRIOCgZ1c2VySUQYAyABKAMSFAoMY2hhcHRlckxldmVsGAQg",
            "ASgFEhEKCXRha2VCdWZmcxgFIAMoBRISCgpiYXR0bGVNb2RlGAYgASgFIjQK",
            "EVN0YXJ0TGV2ZWxSZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAxIPCgdsZXZlbElE",
            "GAIgASgFIlsKElN0YXJ0TGV2ZWxSZXNwb25zZRIOCgZ1c2VySUQYASABKAMS",
            "DwoHbGV2ZWxJRBgCIAEoBRISCgpyYW5kb21TZWVkGAMgASgFEhAKCGJhdHRs",
            "ZUlkGAQgASgDIlcKE1Jldml2ZVBsYXllclJlcXVlc3QSDgoGdXNlcklEGAEg",
            "ASgDEiAKCnJldml2ZVR5cGUYAiABKA4yDC5FUmV2aXZlVHlwZRIOCgZhZENv",
            "ZGUYAyABKAUiJgoUUmV2aXZlUGxheWVyUmVzcG9uc2USDgoGdXNlcklEGAEg",
            "ASgDIuUCChBFeGl0TGV2ZWxSZXF1ZXN0Eg4KBnVzZXJJRBgBIAEoAxIOCgZz",
            "dGF0dXMYAiABKAUSDwoHbGV2ZWxJRBgDIAEoBRIQCghwYXNzVGltZRgEIAEo",
            "BRINCgVzY29yZRgFIAEoBRINCgVwb2ludBgGIAEoBRIQCghkaXN0YW5jZRgH",
            "IAEoBRIlCgttb3N0ZXJJbmZvcxgIIAMoCzIQLktpbGxNb25zdGVySW5mbxIg",
            "CglwaWNrSXRlbXMYCSADKAsyDS5QaWNrSXRlbUluZm8SHwoIb2JzSXRlbXMY",
            "CiADKAsyDS5QaWNrSXRlbUluZm8SEQoJdG90YWxIdXJ0GAsgASgDEhsKE2lz",
            "QmF0dGxlU2VydmVyQ2hlY2sYDCABKAgSIAoLZnJhbWVJbnB1dHMYDSADKAsy",
            "Cy5GcmFtZUlucHV0EhIKCmxldmVsU3RhZ2UYDiABKAUSDgoGcGV0TG9nGA8g",
            "ASgJIt0BChFFeGl0TGV2ZWxSZXNwb25zZRIMCgRpc09rGAEgASgIEg4KBnVz",
            "ZXJJRBgCIAEoAxIOCgZzdGF0dXMYAyABKAUSDwoHbGV2ZWxJRBgEIAEoBRIT",
            "CgtuZXh0TGV2ZWxJRBgFIAEoBRIQCghwYXNzVGltZRgGIAEoBRINCgVpc0Vu",
            "ZBgHIAEoCBIRCglzdGFyTGV2ZWwYCCABKAUSGgoHcmV3YXJkcxgJIAMoCzIJ",
            "Lkl0ZW1EYXRhEhAKCGJhdHRsZUlkGAogASgDEhIKCmxldmVsU3RhZ2UYCyAB",
            "KAUibQoSQ2hhbGxlbmdlc1Jlc3BvbnNlEg4KBnVzZXJJRBgBIAEoAxIdCgpj",
            "aGFsbGVuZ2VzGAIgAygLMgkuS2V5VmFsdWUSFAoMcHZlQ2hhcHRlcklEGAMg",
            "ASgFEhIKCmxldmVsU3RhZ2UYBCABKAUiXQoXQ2hhbGxlbmdlc0RpcnR5UmVz",
            "cG9uc2USDgoGdXNlcklEGAEgASgDEiIKD2NoYWxsZW5nZUxldmVscxgCIAMo",
            "CzIJLktleVZhbHVlEg4KBm9wZW5JZBgDIAMoBSJZChpBZGRDaGFsbGVuZ2Vz",
            "TGV2ZWxSZXNwb25zZRIOCgZ1c2VySUQYASABKAMSEwoLY2hhbGxlbmdlSWQY",
            "AiABKAUSFgoOY2hhbGxlbmdlTGV2ZWwYAyABKAUqSwoPRUJhdHRsZU1vZGVU",
            "eXBlEggKBE5vbmUQABIICgNSdW4QyQESCwoGUHZwUnVuEMoBEggKA1B2ZRDP",
            "ARINCghEYWlseUNoZxDQASosCgtFUmV2aXZlVHlwZRIICgRJdGVtEAASCwoH",
            "RGlhbW9uZBABEgYKAkFEEAJCJQoaY29tLnRvcGdhbWUubWVzc2FnZS5iYXR0",
            "bGWqAgZQcm90bzNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto3.CommonMessageReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto3.EBattleModeType), typeof(global::Proto3.EReviveType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.KillMonsterInfo), global::Proto3.KillMonsterInfo.Parser, new[]{ "MosterID", "KillNum", "Hurt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.PickItemInfo), global::Proto3.PickItemInfo.Parser, new[]{ "ItemID", "ItemNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.EnterLevelRequest), global::Proto3.EnterLevelRequest.Parser, new[]{ "UserID", "Id", "LevelID", "BattleMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.EnterLevelResponse), global::Proto3.EnterLevelResponse.Parser, new[]{ "IsOk", "LevelID", "UserID", "ChapterLevel", "TakeBuffs", "BattleMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.StartLevelRequest), global::Proto3.StartLevelRequest.Parser, new[]{ "UserID", "LevelID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.StartLevelResponse), global::Proto3.StartLevelResponse.Parser, new[]{ "UserID", "LevelID", "RandomSeed", "BattleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RevivePlayerRequest), global::Proto3.RevivePlayerRequest.Parser, new[]{ "UserID", "ReviveType", "AdCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.RevivePlayerResponse), global::Proto3.RevivePlayerResponse.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ExitLevelRequest), global::Proto3.ExitLevelRequest.Parser, new[]{ "UserID", "Status", "LevelID", "PassTime", "Score", "Point", "Distance", "MosterInfos", "PickItems", "ObsItems", "TotalHurt", "IsBattleServerCheck", "FrameInputs", "LevelStage", "PetLog" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ExitLevelResponse), global::Proto3.ExitLevelResponse.Parser, new[]{ "IsOk", "UserID", "Status", "LevelID", "NextLevelID", "PassTime", "IsEnd", "StarLevel", "Rewards", "BattleId", "LevelStage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ChallengesResponse), global::Proto3.ChallengesResponse.Parser, new[]{ "UserID", "Challenges", "PveChapterID", "LevelStage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.ChallengesDirtyResponse), global::Proto3.ChallengesDirtyResponse.Parser, new[]{ "UserID", "ChallengeLevels", "OpenId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3.AddChallengesLevelResponse), global::Proto3.AddChallengesLevelResponse.Parser, new[]{ "UserID", "ChallengeId", "ChallengeLevel" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EBattleModeType {
    /// <summary>
    ///无
    /// </summary>
    [pbr::OriginalName("None")] None = 0,
    /// <summary>
    ///无限模式
    /// </summary>
    [pbr::OriginalName("Run")] Run = 201,
    /// <summary>
    ///pvp
    /// </summary>
    [pbr::OriginalName("PvpRun")] PvpRun = 202,
    /// <summary>
    ///闯关模式
    /// </summary>
    [pbr::OriginalName("Pve")] Pve = 207,
    /// <summary>
    ///每日挑战
    /// </summary>
    [pbr::OriginalName("DailyChg")] DailyChg = 208,
  }

  public enum EReviveType {
    /// <summary>
    ///道具复活
    /// </summary>
    [pbr::OriginalName("Item")] Item = 0,
    /// <summary>
    ///钻石复活
    /// </summary>
    [pbr::OriginalName("Diamond")] Diamond = 1,
    /// <summary>
    ///广告复活
    /// </summary>
    [pbr::OriginalName("AD")] Ad = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 关卡怪物信息
  /// </summary>
  public sealed partial class KillMonsterInfo : pb::IMessage<KillMonsterInfo> {
    private static readonly pb::MessageParser<KillMonsterInfo> _parser = new pb::MessageParser<KillMonsterInfo>(() => new KillMonsterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KillMonsterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillMonsterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillMonsterInfo(KillMonsterInfo other) : this() {
      mosterID_ = other.mosterID_;
      killNum_ = other.killNum_;
      hurt_ = other.hurt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillMonsterInfo Clone() {
      return new KillMonsterInfo(this);
    }

    /// <summary>Field number for the "mosterID" field.</summary>
    public const int MosterIDFieldNumber = 1;
    private int mosterID_;
    /// <summary>
    /// 怪物ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MosterID {
      get { return mosterID_; }
      set {
        mosterID_ = value;
      }
    }

    /// <summary>Field number for the "killNum" field.</summary>
    public const int KillNumFieldNumber = 2;
    private int killNum_;
    /// <summary>
    /// 击杀数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "hurt" field.</summary>
    public const int HurtFieldNumber = 3;
    private int hurt_;
    /// <summary>
    /// 伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hurt {
      get { return hurt_; }
      set {
        hurt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KillMonsterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KillMonsterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MosterID != other.MosterID) return false;
      if (KillNum != other.KillNum) return false;
      if (Hurt != other.Hurt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MosterID != 0) hash ^= MosterID.GetHashCode();
      if (KillNum != 0) hash ^= KillNum.GetHashCode();
      if (Hurt != 0) hash ^= Hurt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MosterID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MosterID);
      }
      if (KillNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(KillNum);
      }
      if (Hurt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hurt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MosterID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MosterID);
      }
      if (KillNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillNum);
      }
      if (Hurt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hurt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KillMonsterInfo other) {
      if (other == null) {
        return;
      }
      if (other.MosterID != 0) {
        MosterID = other.MosterID;
      }
      if (other.KillNum != 0) {
        KillNum = other.KillNum;
      }
      if (other.Hurt != 0) {
        Hurt = other.Hurt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MosterID = input.ReadInt32();
            break;
          }
          case 16: {
            KillNum = input.ReadInt32();
            break;
          }
          case 24: {
            Hurt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PickItemInfo : pb::IMessage<PickItemInfo> {
    private static readonly pb::MessageParser<PickItemInfo> _parser = new pb::MessageParser<PickItemInfo>(() => new PickItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickItemInfo(PickItemInfo other) : this() {
      itemID_ = other.itemID_;
      itemNum_ = other.itemNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickItemInfo Clone() {
      return new PickItemInfo(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    /// 道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    /// <summary>
    /// 道具数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (ItemNum != other.ItemNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterLevelRequest : pb::IMessage<EnterLevelRequest> {
    private static readonly pb::MessageParser<EnterLevelRequest> _parser = new pb::MessageParser<EnterLevelRequest>(() => new EnterLevelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLevelRequest(EnterLevelRequest other) : this() {
      userID_ = other.userID_;
      id_ = other.id_.Clone();
      levelID_ = other.levelID_;
      battleMode_ = other.battleMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLevelRequest Clone() {
      return new EnterLevelRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_id_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> id_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 英雄ID 	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Id {
      get { return id_; }
    }

    /// <summary>Field number for the "levelID" field.</summary>
    public const int LevelIDFieldNumber = 3;
    private int levelID_;
    /// <summary>
    /// 关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    /// <summary>Field number for the "battleMode" field.</summary>
    public const int BattleModeFieldNumber = 4;
    private int battleMode_;
    /// <summary>
    ///战斗模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleMode {
      get { return battleMode_; }
      set {
        battleMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if(!id_.Equals(other.id_)) return false;
      if (LevelID != other.LevelID) return false;
      if (BattleMode != other.BattleMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      hash ^= id_.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      if (BattleMode != 0) hash ^= BattleMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      id_.WriteTo(output, _repeated_id_codec);
      if (LevelID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelID);
      }
      if (BattleMode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BattleMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      size += id_.CalculateSize(_repeated_id_codec);
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      if (BattleMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      id_.Add(other.id_);
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
      if (other.BattleMode != 0) {
        BattleMode = other.BattleMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
          case 24: {
            LevelID = input.ReadInt32();
            break;
          }
          case 32: {
            BattleMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterLevelResponse : pb::IMessage<EnterLevelResponse> {
    private static readonly pb::MessageParser<EnterLevelResponse> _parser = new pb::MessageParser<EnterLevelResponse>(() => new EnterLevelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLevelResponse(EnterLevelResponse other) : this() {
      isOk_ = other.isOk_;
      levelID_ = other.levelID_;
      userID_ = other.userID_;
      chapterLevel_ = other.chapterLevel_;
      takeBuffs_ = other.takeBuffs_.Clone();
      battleMode_ = other.battleMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLevelResponse Clone() {
      return new EnterLevelResponse(this);
    }

    /// <summary>Field number for the "isOk" field.</summary>
    public const int IsOkFieldNumber = 1;
    private bool isOk_;
    /// <summary>
    ///进入关卡是否成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOk {
      get { return isOk_; }
      set {
        isOk_ = value;
      }
    }

    /// <summary>Field number for the "levelID" field.</summary>
    public const int LevelIDFieldNumber = 2;
    private int levelID_;
    /// <summary>
    /// 当前的关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "chapterLevel" field.</summary>
    public const int ChapterLevelFieldNumber = 4;
    private int chapterLevel_;
    /// <summary>
    /// 关卡等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterLevel {
      get { return chapterLevel_; }
      set {
        chapterLevel_ = value;
      }
    }

    /// <summary>Field number for the "takeBuffs" field.</summary>
    public const int TakeBuffsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_takeBuffs_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> takeBuffs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 附加的buffID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TakeBuffs {
      get { return takeBuffs_; }
    }

    /// <summary>Field number for the "battleMode" field.</summary>
    public const int BattleModeFieldNumber = 6;
    private int battleMode_;
    /// <summary>
    ///战斗模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleMode {
      get { return battleMode_; }
      set {
        battleMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOk != other.IsOk) return false;
      if (LevelID != other.LevelID) return false;
      if (UserID != other.UserID) return false;
      if (ChapterLevel != other.ChapterLevel) return false;
      if(!takeBuffs_.Equals(other.takeBuffs_)) return false;
      if (BattleMode != other.BattleMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOk != false) hash ^= IsOk.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ChapterLevel != 0) hash ^= ChapterLevel.GetHashCode();
      hash ^= takeBuffs_.GetHashCode();
      if (BattleMode != 0) hash ^= BattleMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsOk != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOk);
      }
      if (LevelID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelID);
      }
      if (UserID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserID);
      }
      if (ChapterLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChapterLevel);
      }
      takeBuffs_.WriteTo(output, _repeated_takeBuffs_codec);
      if (BattleMode != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BattleMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOk != false) {
        size += 1 + 1;
      }
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ChapterLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterLevel);
      }
      size += takeBuffs_.CalculateSize(_repeated_takeBuffs_codec);
      if (BattleMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterLevelResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsOk != false) {
        IsOk = other.IsOk;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ChapterLevel != 0) {
        ChapterLevel = other.ChapterLevel;
      }
      takeBuffs_.Add(other.takeBuffs_);
      if (other.BattleMode != 0) {
        BattleMode = other.BattleMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOk = input.ReadBool();
            break;
          }
          case 16: {
            LevelID = input.ReadInt32();
            break;
          }
          case 24: {
            UserID = input.ReadInt64();
            break;
          }
          case 32: {
            ChapterLevel = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            takeBuffs_.AddEntriesFrom(input, _repeated_takeBuffs_codec);
            break;
          }
          case 48: {
            BattleMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartLevelRequest : pb::IMessage<StartLevelRequest> {
    private static readonly pb::MessageParser<StartLevelRequest> _parser = new pb::MessageParser<StartLevelRequest>(() => new StartLevelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLevelRequest(StartLevelRequest other) : this() {
      userID_ = other.userID_;
      levelID_ = other.levelID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLevelRequest Clone() {
      return new StartLevelRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "levelID" field.</summary>
    public const int LevelIDFieldNumber = 2;
    private int levelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (LevelID != other.LevelID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (LevelID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            LevelID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartLevelResponse : pb::IMessage<StartLevelResponse> {
    private static readonly pb::MessageParser<StartLevelResponse> _parser = new pb::MessageParser<StartLevelResponse>(() => new StartLevelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLevelResponse(StartLevelResponse other) : this() {
      userID_ = other.userID_;
      levelID_ = other.levelID_;
      randomSeed_ = other.randomSeed_;
      battleId_ = other.battleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartLevelResponse Clone() {
      return new StartLevelResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "levelID" field.</summary>
    public const int LevelIDFieldNumber = 2;
    private int levelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    /// <summary>Field number for the "randomSeed" field.</summary>
    public const int RandomSeedFieldNumber = 3;
    private int randomSeed_;
    /// <summary>
    /// 随机种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 4;
    private long battleId_;
    /// <summary>
    /// 战斗唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (LevelID != other.LevelID) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (BattleId != other.BattleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
      if (BattleId != 0L) hash ^= BattleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (LevelID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelID);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RandomSeed);
      }
      if (BattleId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BattleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartLevelResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
      if (other.RandomSeed != 0) {
        RandomSeed = other.RandomSeed;
      }
      if (other.BattleId != 0L) {
        BattleId = other.BattleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            LevelID = input.ReadInt32();
            break;
          }
          case 24: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 32: {
            BattleId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevivePlayerRequest : pb::IMessage<RevivePlayerRequest> {
    private static readonly pb::MessageParser<RevivePlayerRequest> _parser = new pb::MessageParser<RevivePlayerRequest>(() => new RevivePlayerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevivePlayerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevivePlayerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevivePlayerRequest(RevivePlayerRequest other) : this() {
      userID_ = other.userID_;
      reviveType_ = other.reviveType_;
      adCode_ = other.adCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevivePlayerRequest Clone() {
      return new RevivePlayerRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "reviveType" field.</summary>
    public const int ReviveTypeFieldNumber = 2;
    private global::Proto3.EReviveType reviveType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto3.EReviveType ReviveType {
      get { return reviveType_; }
      set {
        reviveType_ = value;
      }
    }

    /// <summary>Field number for the "adCode" field.</summary>
    public const int AdCodeFieldNumber = 3;
    private int adCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdCode {
      get { return adCode_; }
      set {
        adCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevivePlayerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevivePlayerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (ReviveType != other.ReviveType) return false;
      if (AdCode != other.AdCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ReviveType != 0) hash ^= ReviveType.GetHashCode();
      if (AdCode != 0) hash ^= AdCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (ReviveType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ReviveType);
      }
      if (AdCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AdCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ReviveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReviveType);
      }
      if (AdCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevivePlayerRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ReviveType != 0) {
        ReviveType = other.ReviveType;
      }
      if (other.AdCode != 0) {
        AdCode = other.AdCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            reviveType_ = (global::Proto3.EReviveType) input.ReadEnum();
            break;
          }
          case 24: {
            AdCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevivePlayerResponse : pb::IMessage<RevivePlayerResponse> {
    private static readonly pb::MessageParser<RevivePlayerResponse> _parser = new pb::MessageParser<RevivePlayerResponse>(() => new RevivePlayerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevivePlayerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevivePlayerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevivePlayerResponse(RevivePlayerResponse other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevivePlayerResponse Clone() {
      return new RevivePlayerResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevivePlayerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevivePlayerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevivePlayerResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExitLevelRequest : pb::IMessage<ExitLevelRequest> {
    private static readonly pb::MessageParser<ExitLevelRequest> _parser = new pb::MessageParser<ExitLevelRequest>(() => new ExitLevelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExitLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLevelRequest(ExitLevelRequest other) : this() {
      userID_ = other.userID_;
      status_ = other.status_;
      levelID_ = other.levelID_;
      passTime_ = other.passTime_;
      score_ = other.score_;
      point_ = other.point_;
      distance_ = other.distance_;
      mosterInfos_ = other.mosterInfos_.Clone();
      pickItems_ = other.pickItems_.Clone();
      obsItems_ = other.obsItems_.Clone();
      totalHurt_ = other.totalHurt_;
      isBattleServerCheck_ = other.isBattleServerCheck_;
      frameInputs_ = other.frameInputs_.Clone();
      levelStage_ = other.levelStage_;
      petLog_ = other.petLog_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLevelRequest Clone() {
      return new ExitLevelRequest(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// 关卡战斗是否胜利 1胜利2失败3退出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "levelID" field.</summary>
    public const int LevelIDFieldNumber = 3;
    private int levelID_;
    /// <summary>
    /// 当前的关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    /// <summary>Field number for the "passTime" field.</summary>
    public const int PassTimeFieldNumber = 4;
    private int passTime_;
    /// <summary>
    /// 通关的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassTime {
      get { return passTime_; }
      set {
        passTime_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private int score_;
    /// <summary>
    /// 最终得分;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 6;
    private int point_;
    /// <summary>
    /// 最终得分;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 7;
    private int distance_;
    /// <summary>
    ///距离
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "mosterInfos" field.</summary>
    public const int MosterInfosFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Proto3.KillMonsterInfo> _repeated_mosterInfos_codec
        = pb::FieldCodec.ForMessage(66, global::Proto3.KillMonsterInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.KillMonsterInfo> mosterInfos_ = new pbc::RepeatedField<global::Proto3.KillMonsterInfo>();
    /// <summary>
    ///本次扣除的公会boss血量等于mosterInfo.hurt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.KillMonsterInfo> MosterInfos {
      get { return mosterInfos_; }
    }

    /// <summary>Field number for the "pickItems" field.</summary>
    public const int PickItemsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Proto3.PickItemInfo> _repeated_pickItems_codec
        = pb::FieldCodec.ForMessage(74, global::Proto3.PickItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.PickItemInfo> pickItems_ = new pbc::RepeatedField<global::Proto3.PickItemInfo>();
    /// <summary>
    ///本次扣除的公会boss血量等于mosterInfo.hurt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.PickItemInfo> PickItems {
      get { return pickItems_; }
    }

    /// <summary>Field number for the "obsItems" field.</summary>
    public const int ObsItemsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Proto3.PickItemInfo> _repeated_obsItems_codec
        = pb::FieldCodec.ForMessage(82, global::Proto3.PickItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto3.PickItemInfo> obsItems_ = new pbc::RepeatedField<global::Proto3.PickItemInfo>();
    /// <summary>
    ///障碍表元素拾取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.PickItemInfo> ObsItems {
      get { return obsItems_; }
    }

    /// <summary>Field number for the "totalHurt" field.</summary>
    public const int TotalHurtFieldNumber = 11;
    private long totalHurt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalHurt {
      get { return totalHurt_; }
      set {
        totalHurt_ = value;
      }
    }

    /// <summary>Field number for the "isBattleServerCheck" field.</summary>
    public const int IsBattleServerCheckFieldNumber = 12;
    private bool isBattleServerCheck_;
    /// <summary>
    /// 是否是战斗服校验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBattleServerCheck {
      get { return isBattleServerCheck_; }
      set {
        isBattleServerCheck_ = value;
      }
    }

    /// <summary>Field number for the "frameInputs" field.</summary>
    public const int FrameInputsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Proto3.FrameInput> _repeated_frameInputs_codec
        = pb::FieldCodec.ForMessage(106, global::Proto3.FrameInput.Parser);
    private readonly pbc::RepeatedField<global::Proto3.FrameInput> frameInputs_ = new pbc::RepeatedField<global::Proto3.FrameInput>();
    /// <summary>
    ///关卡实操
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.FrameInput> FrameInputs {
      get { return frameInputs_; }
    }

    /// <summary>Field number for the "levelStage" field.</summary>
    public const int LevelStageFieldNumber = 14;
    private int levelStage_;
    /// <summary>
    ///关卡阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelStage {
      get { return levelStage_; }
      set {
        levelStage_ = value;
      }
    }

    /// <summary>Field number for the "petLog" field.</summary>
    public const int PetLogFieldNumber = 15;
    private string petLog_ = "";
    /// <summary>
    ///战斗宠物信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PetLog {
      get { return petLog_; }
      set {
        petLog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExitLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExitLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Status != other.Status) return false;
      if (LevelID != other.LevelID) return false;
      if (PassTime != other.PassTime) return false;
      if (Score != other.Score) return false;
      if (Point != other.Point) return false;
      if (Distance != other.Distance) return false;
      if(!mosterInfos_.Equals(other.mosterInfos_)) return false;
      if(!pickItems_.Equals(other.pickItems_)) return false;
      if(!obsItems_.Equals(other.obsItems_)) return false;
      if (TotalHurt != other.TotalHurt) return false;
      if (IsBattleServerCheck != other.IsBattleServerCheck) return false;
      if(!frameInputs_.Equals(other.frameInputs_)) return false;
      if (LevelStage != other.LevelStage) return false;
      if (PetLog != other.PetLog) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      if (PassTime != 0) hash ^= PassTime.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      hash ^= mosterInfos_.GetHashCode();
      hash ^= pickItems_.GetHashCode();
      hash ^= obsItems_.GetHashCode();
      if (TotalHurt != 0L) hash ^= TotalHurt.GetHashCode();
      if (IsBattleServerCheck != false) hash ^= IsBattleServerCheck.GetHashCode();
      hash ^= frameInputs_.GetHashCode();
      if (LevelStage != 0) hash ^= LevelStage.GetHashCode();
      if (PetLog.Length != 0) hash ^= PetLog.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (LevelID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelID);
      }
      if (PassTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PassTime);
      }
      if (Score != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score);
      }
      if (Point != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Point);
      }
      if (Distance != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Distance);
      }
      mosterInfos_.WriteTo(output, _repeated_mosterInfos_codec);
      pickItems_.WriteTo(output, _repeated_pickItems_codec);
      obsItems_.WriteTo(output, _repeated_obsItems_codec);
      if (TotalHurt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TotalHurt);
      }
      if (IsBattleServerCheck != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsBattleServerCheck);
      }
      frameInputs_.WriteTo(output, _repeated_frameInputs_codec);
      if (LevelStage != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LevelStage);
      }
      if (PetLog.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(PetLog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      if (PassTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassTime);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      size += mosterInfos_.CalculateSize(_repeated_mosterInfos_codec);
      size += pickItems_.CalculateSize(_repeated_pickItems_codec);
      size += obsItems_.CalculateSize(_repeated_obsItems_codec);
      if (TotalHurt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalHurt);
      }
      if (IsBattleServerCheck != false) {
        size += 1 + 1;
      }
      size += frameInputs_.CalculateSize(_repeated_frameInputs_codec);
      if (LevelStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelStage);
      }
      if (PetLog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PetLog);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExitLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
      if (other.PassTime != 0) {
        PassTime = other.PassTime;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      mosterInfos_.Add(other.mosterInfos_);
      pickItems_.Add(other.pickItems_);
      obsItems_.Add(other.obsItems_);
      if (other.TotalHurt != 0L) {
        TotalHurt = other.TotalHurt;
      }
      if (other.IsBattleServerCheck != false) {
        IsBattleServerCheck = other.IsBattleServerCheck;
      }
      frameInputs_.Add(other.frameInputs_);
      if (other.LevelStage != 0) {
        LevelStage = other.LevelStage;
      }
      if (other.PetLog.Length != 0) {
        PetLog = other.PetLog;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            LevelID = input.ReadInt32();
            break;
          }
          case 32: {
            PassTime = input.ReadInt32();
            break;
          }
          case 40: {
            Score = input.ReadInt32();
            break;
          }
          case 48: {
            Point = input.ReadInt32();
            break;
          }
          case 56: {
            Distance = input.ReadInt32();
            break;
          }
          case 66: {
            mosterInfos_.AddEntriesFrom(input, _repeated_mosterInfos_codec);
            break;
          }
          case 74: {
            pickItems_.AddEntriesFrom(input, _repeated_pickItems_codec);
            break;
          }
          case 82: {
            obsItems_.AddEntriesFrom(input, _repeated_obsItems_codec);
            break;
          }
          case 88: {
            TotalHurt = input.ReadInt64();
            break;
          }
          case 96: {
            IsBattleServerCheck = input.ReadBool();
            break;
          }
          case 106: {
            frameInputs_.AddEntriesFrom(input, _repeated_frameInputs_codec);
            break;
          }
          case 112: {
            LevelStage = input.ReadInt32();
            break;
          }
          case 122: {
            PetLog = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExitLevelResponse : pb::IMessage<ExitLevelResponse> {
    private static readonly pb::MessageParser<ExitLevelResponse> _parser = new pb::MessageParser<ExitLevelResponse>(() => new ExitLevelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExitLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLevelResponse(ExitLevelResponse other) : this() {
      isOk_ = other.isOk_;
      userID_ = other.userID_;
      status_ = other.status_;
      levelID_ = other.levelID_;
      nextLevelID_ = other.nextLevelID_;
      passTime_ = other.passTime_;
      isEnd_ = other.isEnd_;
      starLevel_ = other.starLevel_;
      rewards_ = other.rewards_.Clone();
      battleId_ = other.battleId_;
      levelStage_ = other.levelStage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLevelResponse Clone() {
      return new ExitLevelResponse(this);
    }

    /// <summary>Field number for the "isOk" field.</summary>
    public const int IsOkFieldNumber = 1;
    private bool isOk_;
    /// <summary>
    ///退出关卡是否成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOk {
      get { return isOk_; }
      set {
        isOk_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    /// 关卡战斗是否胜利 1胜利2失败3退出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "levelID" field.</summary>
    public const int LevelIDFieldNumber = 4;
    private int levelID_;
    /// <summary>
    /// 当前的关卡、PVP防御记录序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    /// <summary>Field number for the "nextLevelID" field.</summary>
    public const int NextLevelIDFieldNumber = 5;
    private int nextLevelID_;
    /// <summary>
    /// 下一个关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLevelID {
      get { return nextLevelID_; }
      set {
        nextLevelID_ = value;
      }
    }

    /// <summary>Field number for the "passTime" field.</summary>
    public const int PassTimeFieldNumber = 6;
    private int passTime_;
    /// <summary>
    /// 通关的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassTime {
      get { return passTime_; }
      set {
        passTime_ = value;
      }
    }

    /// <summary>Field number for the "isEnd" field.</summary>
    public const int IsEndFieldNumber = 7;
    private bool isEnd_;
    /// <summary>
    /// 是否是最后一关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnd {
      get { return isEnd_; }
      set {
        isEnd_ = value;
      }
    }

    /// <summary>Field number for the "starLevel" field.</summary>
    public const int StarLevelFieldNumber = 8;
    private int starLevel_;
    /// <summary>
    ///评分等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Proto3.ItemData> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(74, global::Proto3.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Proto3.ItemData> rewards_ = new pbc::RepeatedField<global::Proto3.ItemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.ItemData> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 10;
    private long battleId_;
    /// <summary>
    ///战斗唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "levelStage" field.</summary>
    public const int LevelStageFieldNumber = 11;
    private int levelStage_;
    /// <summary>
    ///关卡阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelStage {
      get { return levelStage_; }
      set {
        levelStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExitLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExitLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOk != other.IsOk) return false;
      if (UserID != other.UserID) return false;
      if (Status != other.Status) return false;
      if (LevelID != other.LevelID) return false;
      if (NextLevelID != other.NextLevelID) return false;
      if (PassTime != other.PassTime) return false;
      if (IsEnd != other.IsEnd) return false;
      if (StarLevel != other.StarLevel) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if (BattleId != other.BattleId) return false;
      if (LevelStage != other.LevelStage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOk != false) hash ^= IsOk.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      if (NextLevelID != 0) hash ^= NextLevelID.GetHashCode();
      if (PassTime != 0) hash ^= PassTime.GetHashCode();
      if (IsEnd != false) hash ^= IsEnd.GetHashCode();
      if (StarLevel != 0) hash ^= StarLevel.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (BattleId != 0L) hash ^= BattleId.GetHashCode();
      if (LevelStage != 0) hash ^= LevelStage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsOk != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOk);
      }
      if (UserID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserID);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (LevelID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LevelID);
      }
      if (NextLevelID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NextLevelID);
      }
      if (PassTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PassTime);
      }
      if (IsEnd != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsEnd);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StarLevel);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (BattleId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BattleId);
      }
      if (LevelStage != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LevelStage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOk != false) {
        size += 1 + 1;
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      if (NextLevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevelID);
      }
      if (PassTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassTime);
      }
      if (IsEnd != false) {
        size += 1 + 1;
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      if (LevelStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelStage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExitLevelResponse other) {
      if (other == null) {
        return;
      }
      if (other.IsOk != false) {
        IsOk = other.IsOk;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
      if (other.NextLevelID != 0) {
        NextLevelID = other.NextLevelID;
      }
      if (other.PassTime != 0) {
        PassTime = other.PassTime;
      }
      if (other.IsEnd != false) {
        IsEnd = other.IsEnd;
      }
      if (other.StarLevel != 0) {
        StarLevel = other.StarLevel;
      }
      rewards_.Add(other.rewards_);
      if (other.BattleId != 0L) {
        BattleId = other.BattleId;
      }
      if (other.LevelStage != 0) {
        LevelStage = other.LevelStage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOk = input.ReadBool();
            break;
          }
          case 16: {
            UserID = input.ReadInt64();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 32: {
            LevelID = input.ReadInt32();
            break;
          }
          case 40: {
            NextLevelID = input.ReadInt32();
            break;
          }
          case 48: {
            PassTime = input.ReadInt32();
            break;
          }
          case 56: {
            IsEnd = input.ReadBool();
            break;
          }
          case 64: {
            StarLevel = input.ReadInt32();
            break;
          }
          case 74: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 80: {
            BattleId = input.ReadInt64();
            break;
          }
          case 88: {
            LevelStage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChallengesResponse : pb::IMessage<ChallengesResponse> {
    private static readonly pb::MessageParser<ChallengesResponse> _parser = new pb::MessageParser<ChallengesResponse>(() => new ChallengesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengesResponse(ChallengesResponse other) : this() {
      userID_ = other.userID_;
      challenges_ = other.challenges_.Clone();
      pveChapterID_ = other.pveChapterID_;
      levelStage_ = other.levelStage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengesResponse Clone() {
      return new ChallengesResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "challenges" field.</summary>
    public const int ChallengesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.KeyValue> _repeated_challenges_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Proto3.KeyValue> challenges_ = new pbc::RepeatedField<global::Proto3.KeyValue>();
    /// <summary>
    ///挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.KeyValue> Challenges {
      get { return challenges_; }
    }

    /// <summary>Field number for the "pveChapterID" field.</summary>
    public const int PveChapterIDFieldNumber = 3;
    private int pveChapterID_;
    /// <summary>
    /// pve关卡id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PveChapterID {
      get { return pveChapterID_; }
      set {
        pveChapterID_ = value;
      }
    }

    /// <summary>Field number for the "levelStage" field.</summary>
    public const int LevelStageFieldNumber = 4;
    private int levelStage_;
    /// <summary>
    ///关卡阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelStage {
      get { return levelStage_; }
      set {
        levelStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if(!challenges_.Equals(other.challenges_)) return false;
      if (PveChapterID != other.PveChapterID) return false;
      if (LevelStage != other.LevelStage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      hash ^= challenges_.GetHashCode();
      if (PveChapterID != 0) hash ^= PveChapterID.GetHashCode();
      if (LevelStage != 0) hash ^= LevelStage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      challenges_.WriteTo(output, _repeated_challenges_codec);
      if (PveChapterID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PveChapterID);
      }
      if (LevelStage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LevelStage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      size += challenges_.CalculateSize(_repeated_challenges_codec);
      if (PveChapterID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PveChapterID);
      }
      if (LevelStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelStage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengesResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      challenges_.Add(other.challenges_);
      if (other.PveChapterID != 0) {
        PveChapterID = other.PveChapterID;
      }
      if (other.LevelStage != 0) {
        LevelStage = other.LevelStage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            challenges_.AddEntriesFrom(input, _repeated_challenges_codec);
            break;
          }
          case 24: {
            PveChapterID = input.ReadInt32();
            break;
          }
          case 32: {
            LevelStage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChallengesDirtyResponse : pb::IMessage<ChallengesDirtyResponse> {
    private static readonly pb::MessageParser<ChallengesDirtyResponse> _parser = new pb::MessageParser<ChallengesDirtyResponse>(() => new ChallengesDirtyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengesDirtyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengesDirtyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengesDirtyResponse(ChallengesDirtyResponse other) : this() {
      userID_ = other.userID_;
      challengeLevels_ = other.challengeLevels_.Clone();
      openId_ = other.openId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengesDirtyResponse Clone() {
      return new ChallengesDirtyResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "challengeLevels" field.</summary>
    public const int ChallengeLevelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto3.KeyValue> _repeated_challengeLevels_codec
        = pb::FieldCodec.ForMessage(18, global::Proto3.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Proto3.KeyValue> challengeLevels_ = new pbc::RepeatedField<global::Proto3.KeyValue>();
    /// <summary>
    ///挑战关卡等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto3.KeyValue> ChallengeLevels {
      get { return challengeLevels_; }
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_openId_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> openId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///开启关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OpenId {
      get { return openId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengesDirtyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengesDirtyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if(!challengeLevels_.Equals(other.challengeLevels_)) return false;
      if(!openId_.Equals(other.openId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      hash ^= challengeLevels_.GetHashCode();
      hash ^= openId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      challengeLevels_.WriteTo(output, _repeated_challengeLevels_codec);
      openId_.WriteTo(output, _repeated_openId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      size += challengeLevels_.CalculateSize(_repeated_challengeLevels_codec);
      size += openId_.CalculateSize(_repeated_openId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengesDirtyResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      challengeLevels_.Add(other.challengeLevels_);
      openId_.Add(other.openId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            challengeLevels_.AddEntriesFrom(input, _repeated_challengeLevels_codec);
            break;
          }
          case 26:
          case 24: {
            openId_.AddEntriesFrom(input, _repeated_openId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddChallengesLevelResponse : pb::IMessage<AddChallengesLevelResponse> {
    private static readonly pb::MessageParser<AddChallengesLevelResponse> _parser = new pb::MessageParser<AddChallengesLevelResponse>(() => new AddChallengesLevelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddChallengesLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3.BattleMessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddChallengesLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddChallengesLevelResponse(AddChallengesLevelResponse other) : this() {
      userID_ = other.userID_;
      challengeId_ = other.challengeId_;
      challengeLevel_ = other.challengeLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddChallengesLevelResponse Clone() {
      return new AddChallengesLevelResponse(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户id （服务器内部使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "challengeId" field.</summary>
    public const int ChallengeIdFieldNumber = 2;
    private int challengeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChallengeId {
      get { return challengeId_; }
      set {
        challengeId_ = value;
      }
    }

    /// <summary>Field number for the "challengeLevel" field.</summary>
    public const int ChallengeLevelFieldNumber = 3;
    private int challengeLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChallengeLevel {
      get { return challengeLevel_; }
      set {
        challengeLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddChallengesLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddChallengesLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (ChallengeId != other.ChallengeId) return false;
      if (ChallengeLevel != other.ChallengeLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ChallengeId != 0) hash ^= ChallengeId.GetHashCode();
      if (ChallengeLevel != 0) hash ^= ChallengeLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (ChallengeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChallengeId);
      }
      if (ChallengeLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChallengeLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ChallengeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeId);
      }
      if (ChallengeLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddChallengesLevelResponse other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ChallengeId != 0) {
        ChallengeId = other.ChallengeId;
      }
      if (other.ChallengeLevel != 0) {
        ChallengeLevel = other.ChallengeLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            ChallengeId = input.ReadInt32();
            break;
          }
          case 24: {
            ChallengeLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
