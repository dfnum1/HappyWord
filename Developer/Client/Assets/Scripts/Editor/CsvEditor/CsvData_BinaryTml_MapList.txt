/********************************************************************
类    名:   CsvData_#CLASS_NAME#
作    者:	自动生成
描    述:	
*********************************************************************/
using UnityEngine;
using System.Collections.Generic;
using Framework.Data;
using Framework.Core;
using Framework.Base;
namespace TopGame.Data
{
	[Framework.Plugin.AT.ATExportMono("配置数据/#CLASS_NAME#", "Data.DataManager.getInstance().#CLASS_NAME#")]
    public partial class CsvData_#CLASS_NAME# : Data_Base
    {
		[Framework.Plugin.AT.ATExportMono("配置数据/#CLASS_NAME#/#CLASS_NAME#Data")]
		public partial class #CLASS_NAME#Data : BaseData
		{
			#PROP_FIELD#
		}
		Dictionary<#DATA_KEY#, List<#CLASS_NAME#Data>> m_vData = new Dictionary<#DATA_KEY#, List<#CLASS_NAME#Data>>();
		//-------------------------------------------
		[Framework.Plugin.AT.ATField("数据列表")]
		public Dictionary<#DATA_KEY#, List<#CLASS_NAME#Data>> datas
		{
			get{ return m_vData;}
		}
        //-------------------------------------------
        public CsvData_#CLASS_NAME#()
        {
			Framework.Plugin.AT.AgentTreeManager.getInstance().RegisterClass(this);
        }
		//-------------------------------------------
		#GENE_FUNCS#
		//-------------------------------------------
		[Framework.Plugin.AT.ATMethod("查找数据")]
		public List<#CLASS_NAME#Data> GetData(#DATA_KEY# id)
		{
			List<#CLASS_NAME#Data> outData;
			if(m_vData.TryGetValue(id, out outData))
				return outData;
			return null;
		}
        //-------------------------------------------
        public override bool LoadBinary(System.IO.BinaryReader reader)
        {
			ClearData();
			int version = reader.ReadInt32();
			ushort head = reader.ReadUInt16();
			int row = reader.ReadInt32();
			int col = reader.ReadInt32();
			if(row <= 0 || col<=0) return false;
			reader.BaseStream.Seek(head, System.IO.SeekOrigin.Current);
			for(int i =0; i < row; i++)
			{
				#CLASS_NAME#Data data = new #CLASS_NAME#Data();
				
				#PARSE_FIELD#
				
				List<#CLASS_NAME#Data> vList;
				if(!m_vData.TryGetValue(#USE_KEY#, out vList))
				{
					vList = new List<#CLASS_NAME#Data>();
					m_vData.Add(#USE_KEY#, vList);
				}
				vList.Add(data);
				OnAddData(data);
			}
			OnLoadCompleted();
            return true;
        }
        //-------------------------------------------
        public override void ClearData()
        {
			m_vData.Clear();
			base.ClearData();
        }
    }
}
