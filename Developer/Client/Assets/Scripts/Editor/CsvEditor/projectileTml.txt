/********************************************************************
类    名:   CsvData_#CLASS_NAME#
作    者:	自动生成
描    述:	
*********************************************************************/
using UnityEngine;
using System.Collections.Generic;
using Framework.Data;
using Framework.Core;
namespace TopGame.Data
{
	[Framework.Plugin.AT.ATExportMono("配置数据/#CLASS_NAME#", "TopGame.Data.DataManager.getInstance().#CLASS_NAME#")]
    public partial class CsvData_#CLASS_NAME# : Data_Base
    {
		Dictionary<#DATA_KEY#, ProjectileData> m_vData = new Dictionary<#DATA_KEY#, ProjectileData>();
		//-------------------------------------------
		[Framework.Plugin.AT.ATField("数据列表")]
		public Dictionary<#DATA_KEY#, ProjectileData> datas
		{
			get{ return m_vData;}
		}
        //-------------------------------------------
        public CsvData_#CLASS_NAME#()
        {
			Framework.Plugin.AT.AgentTreeManager.getInstance().RegisterClass(this);
        }
		//-------------------------------------------
		#GENE_FUNCS#
		//-------------------------------------------
		[Framework.Plugin.AT.ATMethod("查找数据")]
		public ProjectileData GetData(#DATA_KEY# id)
		{
			ProjectileData outData;
			if(m_vData.TryGetValue(id, out outData))
				return outData;
			return null;
		}
        //-------------------------------------------
        public override bool LoadData(string strContext,CsvParser csv = null)
        {
			if(csv == null) csv = new CsvParser();
			if(!csv.LoadTableString(strContext))
				return false;
			ClearData();
#if UNITY_EDITOR
            m_CsvParser = csv;
#endif			
			
			int i = csv.GetTitleLine();
			if(i < 0) return false;
			
			int nLineCnt = csv.GetLineCount();
			for(i++; i < nLineCnt; i++)
			{
				if(!csv[i]["#PROP_KEY#"].IsValid()) continue;
				
				ProjectileData data = new ProjectileData();
				
				#PARSE_FIELD#
				
				m_vData.Add(#USE_KEY#, data);
				OnAddData(data);
			}
			OnLoadCompleted();
            return true;
        }

#if UNITY_EDITOR
        CsvParser m_CsvParser = null;
        //-------------------------------------------
        public override void Save(string strPath = null)
        {
            if (string.IsNullOrEmpty(strPath)) strPath = strFilePath;
            if (System.IO.File.Exists(strPath))
                System.IO.File.Delete(strPath);

            System.IO.FileStream fs = new System.IO.FileStream(strPath, System.IO.FileMode.OpenOrCreate);
            System.IO.StreamWriter writer = new System.IO.StreamWriter(fs, System.Text.Encoding.UTF8);

            int head = m_CsvParser.GetTitleLine();
            int col = m_CsvParser.GetMaxColumn();
            for (int i=0; i <= head; ++i)
            {
                for (int c = 0; c < col; ++c)
                {
                    string vla = m_CsvParser[i][c].String();
                    writer.Write(vla);
                    if (c < col - 1) writer.Write(',');
                }
                writer.Write('\n');
            }

            foreach(var db in m_vData)
            {
				#SAVE_FIELD#
                writer.Write('\n');
            }
            writer.Close();
            fs.Close();
        }
#endif		
        //-------------------------------------------
        public override void ClearData()
        {
			m_vData.Clear();
			base.ClearData();
        }
    }
}