/********************************************************************
类    名:   CsvData_#CLASS_NAME#
作    者:	自动生成
描    述:	
*********************************************************************/
using UnityEngine;
using System.Collections.Generic;
using Framework.Data;
using Framework.Core;
using Framework.Base;
namespace TopGame.Data
{
	[Framework.Plugin.AT.ATExportMono("配置数据/#CLASS_NAME#", "TopGame.Data.DataManager.getInstance().#CLASS_NAME#")]
    public partial class CsvData_#CLASS_NAME# : Data_Base
    {
		Dictionary<#DATA_KEY#, Core.ProjectileData> m_vData = new Dictionary<#DATA_KEY#, Core.ProjectileData>();
		//-------------------------------------------
		[Framework.Plugin.AT.ATField("数据列表")]
		public Dictionary<#DATA_KEY#, Core.ProjectileData> datas
		{
			get{ return m_vData;}
		}
        //-------------------------------------------
        public CsvData_#CLASS_NAME#()
        {
			Framework.Plugin.AT.AgentTreeManager.getInstance().RegisterClass(this);
        }
		//-------------------------------------------
		#GENE_FUNCS#
		//-------------------------------------------
		[Framework.Plugin.AT.ATMethod("查找数据")]
		public Core.ProjectileData GetData(#DATA_KEY# id)
		{
			Core.ProjectileData outData;
			if(m_vData.TryGetValue(id, out outData))
				return outData;
			return null;
		}
        //-------------------------------------------
        public override bool LoadBinary(System.IO.BinaryReader reader)
        {
			ClearData();
			int version = reader.ReadInt32();
			ushort head = reader.ReadUInt16();
			int row = reader.ReadInt32();
			int col = reader.ReadInt32();
			if(row <= 0 || col<=0) return false;
#if UNITY_EDITOR
			head_bodys = reader.ReadBytes(head);
			m_nCol = col;
			m_nRow = row;
			m_nVersion = version;
#else
			reader.BaseStream.Seek(head, System.IO.SeekOrigin.Current);
#endif			
			
			for(int i =0; i < row; i++)
			{
				Core.ProjectileData data = new Core.ProjectileData();
				
				#PARSE_FIELD#
				
				m_vData.Add(#USE_KEY#, data);
				OnAddData(data);
			}
			OnLoadCompleted();
            return true;
        }
        //-------------------------------------------
        public override void ClearData()
        {
			m_vData.Clear();
			base.ClearData();
        }
#if UNITY_EDITOR
		byte[] head_bodys = null;
		int m_nRow = 0;
		int m_nCol = 0;
		int m_nVersion = 0;
		//-------------------------------------------
		public override void Save(string strPath=null)
		{
			if(string.IsNullOrEmpty(strPath)) strPath = strFilePath;
		    if (System.IO.File.Exists(strPath))
                System.IO.File.Delete(strPath);
				
			System.IO.FileStream fs = new System.IO.FileStream(strPath, System.IO.FileMode.OpenOrCreate);
			System.IO.BinaryWriter writer = new System.IO.BinaryWriter(fs, System.Text.Encoding.UTF8);
			writer.Write(m_nVersion);
			if(head_bodys!=null)
				writer.Write((ushort)head_bodys.Length);
			else
				writer.Write((ushort)0);
			writer.Write(m_nRow);
			writer.Write(m_nCol);
			if(head_bodys!=null)writer.Write(head_bodys);
			foreach(var db in m_vData)
			{
				#SAVE_FIELD#
			}
			writer.Close();
			fs.Close();
		}
#endif		
    }
}